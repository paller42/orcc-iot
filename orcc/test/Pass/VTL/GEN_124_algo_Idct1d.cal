// GEN_124_algo_Idct1d.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// Author: Matthieu Wipliez (mwipliez@insa-rennes.fr)
// Rewrote because code generator does not accept x := [ x[i] ... ]; assignments yet.
actor GEN_124_algo_Idct1d (bool ROW) int X ==> int Y :

	List(type: int, size=4) W0 = [ 2048, 2676, 2841, 1609 ];

	List(type: int, size=4) W1 = [ 2048, 1108, 565, 2408 ];

	action X:[ x ] repeat 8 ==> Y:[ y[0], y[4], y[6], y[2], y[3], y[7], y[5], y[1] ]
	var
		List(type: int, size=8) y , int y6 , int y7 , List(type: int, size=8) o = if ROW then
			[ 128, 128, 0, 0, 0, 0, 0, 0 ]
		else
			[ 65536, 65536, 4, 4, 4, 4, 4, 4 ]
		end
	do
		y := [ x[0], x[4], x[2], x[6], x[1], x[7], x[5], x[3] ];
		x := [ (y[2 * i] * W0[i] + y[2 * i + 1] * W1[i]), (y[2 * i] * W1[i] - y[2 * i + 1] * W0[i]) : for int i in 0 .. 3 ];
		y := [ (x[i] + o[i]) >> if ROW then 0 else 3 end : for int i in 0 .. 7 ];
		x := [ y[4 * i] + y[4 * i + 2], y[4 * i] - y[4 * i + 2], y[4 * i + 1] + y[4 * i + 3], y[4 * i + 1] - y[4 * i + 3] : for int i
		in 0 .. 1 ];
		y6 := (181 * (x[5] + x[7]) + 128) >> 8;
		y7 := (181 * (x[5] - x[7]) + 128) >> 8;
		y := [ x[0], x[1], x[4], x[6], x[2], x[3], y6, y7 ];
		x := [ y[4 * i] + y[4 * i + 2], y[4 * i] - y[4 * i + 2], y[4 * i + 1] + y[4 * i + 3], y[4 * i + 1] - y[4 * i + 3] : for int i
		in 0 .. 1 ];
		y := [ x[i] >> if ROW then 8 else 14 end : for int i in 0 .. 7 ];
	end

end