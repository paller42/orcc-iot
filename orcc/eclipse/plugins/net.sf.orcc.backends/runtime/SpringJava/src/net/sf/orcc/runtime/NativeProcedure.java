/*
 * Copyright (c) 2009-2010, IETR/INSA of Rennes and EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes and EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package net.sf.orcc.runtime;

import java.math.BigInteger;

import net.sf.orcc.runtime.source.Source;
import std.io.impl.AccessFile;
import std.io.impl.AccessImage;
import std.video.impl.DisplayYUV;

/**
 * This static class is used in code generated by Orcc Java backend. All static
 * methods listed here are a simple edge between CAL native procedure call and
 * their concrete implementation. In generated Java source files, only this
 * class can be imported to get all functionalities of the runtime library.
 * 
 * @author Antoine Lorence
 * 
 */
public class NativeProcedure {

	/************************
	 * AccessFile Class
	 ************************/

	/**
	 * @param fileName
	 * @return
	 */
	public static Integer openFile(String fileName) {
		return AccessFile.openFile(fileName);
	}

	/**
	 * @param desc
	 * @return
	 */
	public static Integer sizeOfFile(Integer desc) {
		return AccessFile.sizeOfFile(desc);
	
	}

	/**
	 * @param desc
	 * @param pos
	 */
	public static void seek(int desc, int pos) {
		AccessFile.seek(desc, pos);
	}

	/**
	 * @param desc
	 * @return
	 */
	public static Integer filePointer(Integer desc) {
		return AccessFile.filePointer(desc);
	}

	/**
	 * @param desc
	 * @return
	 */
	public static Integer readByte(Integer desc) {
		return AccessFile.readByte(desc);
	}

	/**
	 * @param desc
	 * @param buffer
	 * @param count
	 */
	public static void readBytes(Integer desc, int[] buffer, Integer count) {
		AccessFile.readBytes(desc, buffer, count);
	}

	/**
	 * @param desc
	 * @param v
	 */
	public static void writeByte(Integer desc, Integer v) {
		AccessFile.writeByte(desc, v);
	}

	/**
	 * @param desc
	 * @param v
	 */
	public static void writeByte(BigInteger desc, BigInteger v) {
		AccessFile.writeByte(desc, v);
	}

	/**
	 * @param desc
	 * @param buffer
	 * @param count
	 */
	public static void writeBytes(Integer desc, int[] buffer, Integer count) {
		AccessFile.writeBytes(desc, buffer, count);
	}

	/**
	 * @param desc
	 * @param buffer
	 * @param count
	 */
	public static void writeBytes(BigInteger desc, int[] buffer, BigInteger count) {
		AccessFile.writeBytes(desc, buffer, count);
	}
	
	/**
	 * @param desc
	 * @return
	 */
	public static Integer closeFile(Integer desc) {
		return AccessFile.closeFile(desc);
	}


	/************************
	 * AccessImage Class
	 ************************/

	/**
	 * @param fileName
	 * @param colorSpace
	 * @return
	 */
	public static Integer openImage(String fileName, Integer colorSpace) {
		return AccessImage.openImage(fileName, colorSpace);
	}

	/**
	 * @param desc
	 * @return
	 */
	public static Integer closeImage(Integer desc) {
		return AccessImage.closeImage(desc);
	}

	/**
	 * @param desc
	 * @param image
	 */
	public static void readImage(Integer desc, int[][][] image) {
		AccessImage.readImage(desc, image);
	}

	/**
	 * @param desc
	 * @param image
	 */
	public static void writeImage(Integer desc, int[][][] image) {
		AccessImage.writeImage(desc, image);
	}

	/**
	 * @param desc
	 * @param resolution
	 */
	public static void getImageResolution(int desc, int[] resolution) {
		AccessImage.getImageResolution(desc, resolution);
	}

	/**
	 * @param desc
	 * @param resolution
	 */
	public static void setImageResolution(Integer desc, int[] resolution) {
		AccessImage.setImageResolution(desc, resolution);
	}


	/************************
	 * DisplayYUV Class
	 ************************/

	/**
	 * 
	 */
	public static void displayYUV_init() {
		DisplayYUV.displayYUV_init();
	}

	/**
	 * @param pictureBufferY
	 * @param pictureBufferU
	 * @param pictureBufferV
	 * @param local_cropPicWthLuma
	 * @param local_cropPicHghtLuma
	 */
	public static void displayYUV_displayPicture(int[] pictureBufferY,
			int[] pictureBufferU, int[] pictureBufferV,
			Integer pictureWidth, Integer pictureHeight) {
		DisplayYUV.displayYUV_displayPicture(pictureBufferY, pictureBufferU,
				pictureBufferV, pictureWidth, pictureHeight);
	}

	/**
	 * @return
	 */
	public static int displayYUV_getFlags() {
		return DisplayYUV.displayYUV_getFlags();
	}

	/**
	 * 
	 */
	public static void compareYUV_init() {
		DisplayYUV.compareYUV_init();
	}

	/**
	 * @param pictureBufferY
	 * @param pictureBufferU
	 * @param pictureBufferV
	 * @param pictureWidth
	 * @param pictureHeight
	 */
	public static void compareYUV_comparePicture(int[] pictureBufferY,
			int[] pictureBufferU, int[] pictureBufferV,
			Integer pictureWidth, Integer pictureHeight) {
		DisplayYUV.compareYUV_comparePicture(pictureBufferY, pictureBufferU,
				pictureBufferV, pictureWidth, pictureHeight);
	}

	/**
	 * 
	 */
	public static void fpsPrintInit() {
		DisplayYUV.fpsPrintInit();
	}

	/**
	 * 
	 */
	public static void fpsPrintNewPicDecoded() {
		DisplayYUV.fpsPrintNewPicDecoded();
	}

	/************************
	 * Source Class
	 ************************/
	
	/**
	 * 
	 */
	public static void source_init() {
		Source.source_init();
	}

	/**
	 * @return
	 */
	public static int source_getNbLoop() {
		return Source.source_getNbLoop();
	}

	/**
	 * @return
	 */
	public static boolean source_isMaxLoopsReached() {
		return Source.source_isMaxLoopsReached();
	}

	/**
	 * @return
	 */
	public static void source_decrementNbLoops() {
		Source.source_decrementNbLoops();
	}

	/**
	 * 
	 */
	public static void source_rewind() {
		Source.source_rewind();
	}

	/**
	 * @return
	 */
	public static int source_sizeOfFile() {
		return Source.source_sizeOfFile();
	}

	/**
	 * @param outTable
	 * @param nbTokenToRead
	 */
	public static void source_readNBytes(int[] outTable, Integer nbTokenToRead) {
		Source.source_readNBytes(outTable, nbTokenToRead);
	}

	/**
	 * @param status
	 */
	public static void source_exit(Integer status) {
		Source.source_exit(status);
	}

}
