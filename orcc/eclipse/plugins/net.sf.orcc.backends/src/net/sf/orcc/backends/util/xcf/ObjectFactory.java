//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.12.10 at 06:50:26 PM CET 
//


package net.sf.orcc.backends.util.xcf;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the xcfparser package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: xcfparser
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Configuration }
     * 
     */
    public Configuration createConfiguration() {
        return new Configuration();
    }

    /**
     * Create an instance of {@link Configuration.Connections }
     * 
     */
    public Configuration.Connections createConfigurationConnections() {
        return new Configuration.Connections();
    }

    /**
     * Create an instance of {@link Configuration.Media }
     * 
     */
    public Configuration.Media createConfigurationMedia() {
        return new Configuration.Media();
    }

    /**
     * Create an instance of {@link Configuration.Media.Interface }
     * 
     */
    public Configuration.Media.Interface createConfigurationMediaInterface() {
        return new Configuration.Media.Interface();
    }

    /**
     * Create an instance of {@link Configuration.Backends }
     * 
     */
    public Configuration.Backends createConfigurationBackends() {
        return new Configuration.Backends();
    }

    /**
     * Create an instance of {@link Configuration.Backends.Backend }
     * 
     */
    public Configuration.Backends.Backend createConfigurationBackendsBackend() {
        return new Configuration.Backends.Backend();
    }

    /**
     * Create an instance of {@link Configuration.Partitioning }
     * 
     */
    public Configuration.Partitioning createConfigurationPartitioning() {
        return new Configuration.Partitioning();
    }

    /**
     * Create an instance of {@link Configuration.Partitioning.Partition }
     * 
     */
    public Configuration.Partitioning.Partition createConfigurationPartitioningPartition() {
        return new Configuration.Partitioning.Partition();
    }

    /**
     * Create an instance of {@link Configuration.Network }
     * 
     */
    public Configuration.Network createConfigurationNetwork() {
        return new Configuration.Network();
    }

    /**
     * Create an instance of {@link Configuration.Connections.FifoConnection }
     * 
     */
    public Configuration.Connections.FifoConnection createConfigurationConnectionsFifoConnection() {
        return new Configuration.Connections.FifoConnection();
    }

    /**
     * Create an instance of {@link Configuration.Media.Interface.Parameter }
     * 
     */
    public Configuration.Media.Interface.Parameter createConfigurationMediaInterfaceParameter() {
        return new Configuration.Media.Interface.Parameter();
    }

    /**
     * Create an instance of {@link Configuration.Backends.Backend.Parameter }
     * 
     */
    public Configuration.Backends.Backend.Parameter createConfigurationBackendsBackendParameter() {
        return new Configuration.Backends.Backend.Parameter();
    }

    /**
     * Create an instance of {@link Configuration.Partitioning.Partition.Instance }
     * 
     */
    public Configuration.Partitioning.Partition.Instance createConfigurationPartitioningPartitionInstance() {
        return new Configuration.Partitioning.Partition.Instance();
    }

}
