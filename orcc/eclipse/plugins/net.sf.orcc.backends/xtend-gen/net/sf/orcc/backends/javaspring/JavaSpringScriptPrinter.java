/**
 * Copyright (c) 2012,
 * Nebojša Taušan, Gabor Paller, Gabor Farkas, Endri Bezati
 * All rights reserved.
 */
package net.sf.orcc.backends.javaspring;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import net.sf.orcc.backends.java.JavaScriptPrinter;
import net.sf.orcc.df.Actor;
import net.sf.orcc.df.Network;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * following script generators are implemented:
 * 
 * getPomXMLContent() generates the pom.xml which enables the compilation of generated Java Spring sources with Maven
 * getSpringStarterFileContent() 	generates the content of the Spring starter class
 * getJSONtokenFileContent()  generates the JSON representation of the token. // Not used any more, java files are in runtime folder
 * getQueueConfig()  generates configuration file for Spring boot queue class
 * getQueueFileContent() generates the queue class for each port in the network
 * getAzureProperties() generates the azure.properties file that is referenced from pom.xml
 * getSSHDConfig()     generates configuration script for SSHD for docker image
 * getInit()		generates initialization script that will start the application in cloud
 * getDockerFile(String jarName) generates the Dockerfile for building docker image
 * getWebSocketConfig(String networkName) generates the Web socket configuration class
 * getSocketHandler(String networkName) generates the socket handler class
 */
@SuppressWarnings("all")
public class JavaSpringScriptPrinter extends JavaScriptPrinter {
  private String azure_resource_group;
  
  private String azure_eventhub_namespace;
  
  private String azure_acr_username;
  
  private String azure_acr_password;
  
  private String azure_amqp_uri;
  
  private String azure_db_name;
  
  private String azure_db_URI;
  
  private String networkSimpleName;
  
  private HashSet<String> nativeActSet = new HashSet<String>();
  
  @Override
  public Network setNetwork(final Network network) {
    this.networkSimpleName = network.getSimpleName().replaceAll("[^A-Za-z0-9]", "");
    this.network = network;
    this.hasNative = false;
    int _size = network.getAllActors().size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      boolean _isNative = network.getAllActors().get((i).intValue()).isNative();
      if (_isNative) {
        this.hasNative = true;
      }
    }
    return null;
  }
  
  public CharSequence getPomXMLContent(final HashMap<String, String> portNames, final String projectName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<modelVersion>4.0.0</modelVersion>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("<groupId>net.sf.orcc</groupId>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("<artifactId>");
    _builder.append(((projectName + "_") + this.networkSimpleName), "\t ");
    _builder.append("</artifactId>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("<version>1.0-SNAPSHOT</version>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("<packaging>jar</packaging>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("<name>");
    _builder.append(((projectName + "_") + this.networkSimpleName), "\t ");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("<description>Spring Boot app for actors that are part of ");
    _builder.append(this.networkSimpleName, "\t ");
    _builder.append(" network.</description>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<profiles>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<profile>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<id>install</id>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<azure.install>true</azure.install>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<azure.uninstall>false</azure.uninstall>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<activation>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<activeByDefault>true</activeByDefault>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</activation>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</profile>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<profile>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<id>uninstall</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<azure.install>false</azure.install>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<azure.uninstall>true</azure.uninstall>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</profile>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</profiles>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<parent>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<artifactId>spring-boot-starter-parent</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<version>2.1.0.RELEASE</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<relativePath/> <!-- lookup parent from repository -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</parent>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("<instance.name>");
    String _replaceAll = projectName.toLowerCase().replaceAll("[^A-Za-z0-9]", "");
    String _replaceAll_1 = this.networkSimpleName.toLowerCase().replaceAll("[^A-Za-z0-9]", "");
    String _plus = (_replaceAll + _replaceAll_1);
    _builder.append(_plus, "\t  \t");
    _builder.append("</instance.name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  \t");
    _builder.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<maven.compiler.source>1.8</maven.compiler.source>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<maven.compiler.target>1.8</maven.compiler.target>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<java.version>1.8</java.version>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("</properties>");
    _builder.newLine();
    {
      if (this.hasNative) {
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("<repositories>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<repository>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<id>repos-local</id>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<name>repository</name>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<url>file://${project.basedir}\\repos</url>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" \t");
        _builder.append("</repository>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</repositories>");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<dependencies>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>spring-boot-starter-web</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>spring-boot-starter-websocket</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>spring-boot-starter-test</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<scope>test</scope>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>spring-boot-starter-activemq</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.apache.geronimo.specs</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>geronimo-jms_1.1_spec</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<version>1.1.1</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>spring-boot-starter-data-mongodb</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.apache.qpid</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>qpid-amqp-1-0-client</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<version>0.32</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.apache.qpid</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>qpid-amqp-1-0-client-jms</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<version>0.32</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dependency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<groupId>org.apache.qpid</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<artifactId>qpid-amqp-1-0-common</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<version>0.32</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dependency>");
    _builder.newLine();
    {
      List<Actor> _allActors = this.network.getAllActors();
      for(final Actor act : _allActors) {
        {
          boolean _isNative = act.isNative();
          if (_isNative) {
            {
              String _package = act.getPackage();
              String _stringValue = act.getAttribute("jar").getAttribute("artifactid").getStringValue();
              String _plus_1 = (_package + _stringValue);
              boolean _add = this.nativeActSet.add(_plus_1);
              if (_add) {
                _builder.append("\t");
                _builder.append("<dependency>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<groupId>");
                String _package_1 = act.getPackage();
                _builder.append(_package_1, "\t\t");
                _builder.append("</groupId>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<artifactId>");
                String _stringValue_1 = act.getAttribute("jar").getAttribute("artifactid").getStringValue();
                _builder.append(_stringValue_1, "\t\t");
                _builder.append("</artifactId>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("<version>");
                String _stringValue_2 = act.getAttribute("jar").getAttribute("jarversion").getStringValue();
                _builder.append(_stringValue_2, "\t\t");
                _builder.append("</version>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("</dependency>");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    this.nativeActSet.clear();
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</dependencies>\t\t  ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<build>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<plugins>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>spring-boot-maven-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.codehaus.mojo</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>properties-maven-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>1.0-alpha-1</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<executions>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>initialize</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>read-project-properties</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<files>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<file>azure.properties</file>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</files>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</executions>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<artifactId>exec-maven-plugin</artifactId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<version>1.6.0</version>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<groupId>org.codehaus.mojo</groupId>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<executions>");
    _builder.newLine();
    {
      Set<String> _keySet = portNames.keySet();
      for(final String pn : _keySet) {
        _builder.append("\t\t\t\t\t");
        _builder.append("<execution>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<id>Creating port: ");
        _builder.append(pn, "\t\t\t\t\t\t");
        _builder.append(" .... </id>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<phase>install</phase>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<goals>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<goal>exec</goal>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("</goals>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<configuration>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<executable>az</executable>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<commandlineArgs>eventhubs eventhub create --resource-group ${azure.resource_group} --namespace-name ${azure.eventhub_namespace} --name ");
        _builder.append(pn, "\t\t\t\t\t\t\t");
        _builder.append(" --message-retention 1 --partition-count 2</commandlineArgs>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<skip>${azure.uninstall}</skip>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("</configuration>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("</execution>\t\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Creating docker build</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>docker</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>build -t ${instance.name}/${instance.name} .</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.uninstall}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Tagging docker build</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>docker</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>tag ${instance.name}/${instance.name} ${azure.acr_username}.azurecr.io/${instance.name}</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.uninstall}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Logging in to the registry</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>az</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>acr login --name ${azure.acr_username}</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.uninstall}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Pushing image</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>docker</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>push ${azure.acr_username}.azurecr.io/${instance.name}</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.uninstall}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Creating instance</id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>az</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>container create --name ${instance.name} --ports 8080 --image ${azure.acr_username}.azurecr.io/${instance.name}:latest --cpu 1 --memory 2 --ip-address public -g ${azure.resource_group} --registry-username ${azure.acr_username} --registry-password ${azure.acr_password}</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.uninstall}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<execution>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<id>Deleting instance ${instance.name} ..... </id>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<phase>install</phase>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<goal>exec</goal>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</goals>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<executable>az</executable>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<commandlineArgs>container delete --name ${instance.name} --resource-group ${azure.resource_group} --yes</commandlineArgs>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<skip>${azure.install}</skip>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</execution>");
    _builder.newLine();
    {
      Set<String> _keySet_1 = portNames.keySet();
      for(final String pn_1 : _keySet_1) {
        _builder.append("\t\t\t\t\t");
        _builder.append("<execution>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<id>Deleting port: ");
        _builder.append(pn_1, "\t\t\t\t\t\t");
        _builder.append(" .... </id>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<phase>install</phase>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<goals>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<goal>exec</goal>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("</goals>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("<configuration>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<executable>az</executable>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<commandlineArgs>eventhubs eventhub delete --resource-group ${azure.resource_group} --namespace-name ${azure.eventhub_namespace} --name ");
        _builder.append(pn_1, "\t\t\t\t\t\t\t");
        _builder.append("</commandlineArgs>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("<skip>${azure.install}</skip>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("</configuration>");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("</execution>\t\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("</executions>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</plugin>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</plugins>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</build> ");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence getSpringStarterFileContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.networkSimpleName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.boot.SpringApplication;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.autoconfigure.SpringBootApplication;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SpringBootApplication");
    _builder.newLine();
    _builder.append("public class Starter {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SpringApplication.run(Starter.class, args);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getQueueConfig(final String networkName, final String portName, final String io) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Hashtable;");
    _builder.newLine();
    _builder.append("import javax.jms.ConnectionFactory;");
    _builder.newLine();
    _builder.append("import javax.naming.Context;");
    _builder.newLine();
    _builder.append("import javax.naming.InitialContext;");
    _builder.newLine();
    _builder.append("import javax.naming.NamingException;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Value;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Qualifier;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.context.event.ApplicationReadyEvent;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactoryConfigurer;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.PropertySource;");
    _builder.newLine();
    _builder.append("import org.springframework.context.event.EventListener;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.annotation.JmsListener;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.annotation.EnableJms;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.core.JmsTemplate;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.config.DefaultJmsListenerContainerFactory;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.config.JmsListenerContainerFactory;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@EnableJms");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PropertySource(\"classpath:jms.properties\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class QueueCfg_");
    _builder.append(portName, "\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final Logger LOGGER = LoggerFactory.getLogger( QueueCfg_");
    _builder.append(portName, "\t");
    _builder.append(".class );");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Value(\"${amqp_uri}\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private String amqp_uri;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public ConnectionFactory connectionFactory_");
    _builder.append(portName, "\t\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("ConnectionFactory cf = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Hashtable<String, String> env = new Hashtable<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("env.put(Context.INITIAL_CONTEXT_FACTORY, \"org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactory\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("env.put( \"connectionfactory.SBCF\", amqp_uri );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Context context = new InitialContext(env);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("cf = (ConnectionFactory) context.lookup(\"SBCF\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch( NamingException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info( \"NamingException: \"+ex.getMessage() );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return cf;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public JmsListenerContainerFactory<?> jsaFactory_");
    _builder.append(portName, "\t\t");
    _builder.append("(ConnectionFactory connectionFactory_");
    _builder.append(portName, "\t\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("DefaultJmsListenerContainerFactoryConfigurer configurer) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("factory.setConnectionFactory(connectionFactory_");
    _builder.append(portName, "\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("factory.setConcurrency(\"1-1\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("factory.setPubSubDomain(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("factory.setSubscriptionDurable(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//factory.setClientId(\"");
    _builder.append(networkName, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return factory;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Qualifier(\"");
    _builder.append(portName, "\t\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("public JmsTemplate jmsTemplate_");
    _builder.append(portName, "\t\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("JmsTemplate template = new JmsTemplate();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("template.setConnectionFactory(connectionFactory_");
    _builder.append(portName, "\t\t\t");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return template;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getQueueFileContent(final String networkName, final String portName, final String tokenType, final String io) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;\t\t");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Qualifier;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.annotation.JmsListener;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.core.JmsTemplate;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.support.JmsHeaders;\t\t");
    _builder.newLine();
    _builder.append("import org.springframework.messaging.handler.annotation.Header;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;\t\t");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.node.ObjectNode;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.append("import net.sf.orcc.runtime.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("@Component");
    _builder.newLine();
    _builder.append("public class Queue_");
    _builder.append(portName);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final Logger LOGGER = LoggerFactory.getLogger( Queue_");
    _builder.append(portName, "\t");
    _builder.append(".class );");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Queue_");
    _builder.append(portName, "\t");
    _builder.append("(){ ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Object of Class Queue_");
    _builder.append(portName, "\t\t");
    _builder.append(" is created: \" + this);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("//initialize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//schedule();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.newLine();
    {
      boolean _equals = io.equals("input");
      if (_equals) {
        _builder.append("\t\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(networkName, "\t\t");
        _builder.append(" tokenReceiver;\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("@JmsListener(destination = \"");
        _builder.append(portName, "\t\t");
        _builder.append("/ConsumerGroups/$Default/Partitions/0\", containerFactory=\"jsaFactory_");
        _builder.append(portName, "\t\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("public void inputPodReceive0(String msg, @Header(JmsHeaders.TIMESTAMP) long timeStamp){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("inputPodAction( msg,timeStamp );");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("@JmsListener(destination = \"");
        _builder.append(portName, "\t\t");
        _builder.append("/ConsumerGroups/$Default/Partitions/1\", containerFactory=\"jsaFactory_");
        _builder.append(portName, "\t\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("public void inputPodReceive1(String msg, @Header(JmsHeaders.TIMESTAMP) long timeStamp) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("inputPodAction( msg, timeStamp );");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("IDBRepository dbRepository;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("private void inputPodAction( String msg, long timeStamp ) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("//LOGGER.info(\"Queue_");
        _builder.append(portName, "\t\t\t");
        _builder.append("   inputPodAction msg: \" + msg + \"receive and invoke put to fifo function\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("ObjectMapper mapper = new ObjectMapper();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append(tokenType, "\t\t\t\t");
        _builder.append("JSONToken token = mapper.readValue( msg, ");
        _builder.append(tokenType, "\t\t\t\t");
        _builder.append("JSONToken.class );");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("LOGGER.info(\"Token receiver object is\" + tokenReceiver + \" sender is \" + this);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("tokenReceiver.receive_");
        _builder.append(portName, "\t\t\t\t");
        _builder.append("_");
        _builder.append(tokenType, "\t\t\t\t");
        _builder.append("Token( token.pod,token.value );");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("dbRepository.save(new DBRepository<");
        _builder.append(tokenType, "\t\t\t\t");
        _builder.append(">(\"receiving\",\"");
        _builder.append(portName, "\t\t\t\t");
        _builder.append("\",System.currentTimeMillis() ,token.value, token.timeStamp, token.pod,token.type));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("} catch( JsonProcessingException ex ) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("ex.printStackTrace();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("} catch( IOException ex ) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("ex.printStackTrace();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      boolean _equals_1 = io.equals("output");
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Qualifier(\"");
        _builder.append(portName, "\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("JmsTemplate template;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("IDBRepository dbRepository;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("public void send");
        _builder.append(tokenType, "\t\t");
        _builder.append("ToQueue( String podName, ");
        _builder.append(tokenType, "\t\t");
        _builder.append(" v ) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("LOGGER.info( \"Queue_");
        _builder.append(portName, "\t\t\t");
        _builder.append("  send");
        _builder.append(tokenType, "\t\t\t");
        _builder.append("ToOutputPod: podName: \"+podName+\"; value: \"+v + \"sending to queue\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("ObjectMapper mapper = new ObjectMapper();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(tokenType, "\t\t\t");
        _builder.append("JSONToken token = new ");
        _builder.append(tokenType, "\t\t\t");
        _builder.append("JSONToken( podName, System.currentTimeMillis() , v );");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("String on_s = mapper.writeValueAsString(token);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("template.convertAndSend( podName, on_s);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("dbRepository.save(new DBRepository<");
        String _firstUpper = StringExtensions.toFirstUpper(tokenType);
        _builder.append(_firstUpper, "\t\t\t\t");
        _builder.append(">(\"sending\",\"");
        _builder.append(portName, "\t\t\t\t");
        _builder.append("\",System.currentTimeMillis(), token.value, token.timeStamp, token.pod,token.type));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("} catch( JsonProcessingException ex ) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("ex.printStackTrace();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getAzureProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Azure resource group");
    _builder.newLine();
    _builder.append("azure.resource_group=");
    _builder.append(this.azure_resource_group);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// Azure event hub namespace");
    _builder.newLine();
    _builder.append("azure.eventhub_namespace=");
    _builder.append(this.azure_eventhub_namespace);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// The Azure Container Registry name to use");
    _builder.newLine();
    _builder.append("azure.acr_username = \"");
    _builder.append(this.azure_acr_username);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// ACR password. azure_create_acr.sh script produces this password");
    _builder.newLine();
    _builder.append("azure.acr_password = \"");
    _builder.append(this.azure_acr_password);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String setAzureProperties(final Properties azureCredsProps) {
    String _xblockexpression = null;
    {
      this.azure_resource_group = azureCredsProps.getProperty("azure.resource.group");
      this.azure_eventhub_namespace = azureCredsProps.getProperty("azure.eventhub.namespace");
      this.azure_acr_username = azureCredsProps.getProperty("azure.acr.username");
      this.azure_acr_password = azureCredsProps.getProperty("azure.acr.password");
      this.azure_amqp_uri = azureCredsProps.getProperty("azure.amqp.uri");
      this.azure_db_name = azureCredsProps.getProperty("azure.db.name");
      _xblockexpression = this.azure_db_URI = azureCredsProps.getProperty("azure.db.URI");
    }
    return _xblockexpression;
  }
  
  public CharSequence getJMSProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("amqp_uri=");
    _builder.append(this.azure_amqp_uri);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getSSHDConfig() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# /etc/ssh/sshd_config");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Port 2222");
    _builder.newLine();
    _builder.append("ListenAddress 0.0.0.0");
    _builder.newLine();
    _builder.append("LoginGraceTime 180");
    _builder.newLine();
    _builder.append("X11Forwarding yes");
    _builder.newLine();
    _builder.append("Ciphers aes128-cbc,3des-cbc,aes256-cbc");
    _builder.newLine();
    _builder.append("MACs hmac-sha1,hmac-sha1-96");
    _builder.newLine();
    _builder.append("StrictModes yes");
    _builder.newLine();
    _builder.append("SyslogFacility DAEMON");
    _builder.newLine();
    _builder.append("PrintMotd no");
    _builder.newLine();
    _builder.append("IgnoreRhosts no");
    _builder.newLine();
    _builder.append("#deprecated option ");
    _builder.newLine();
    _builder.append("#RhostsAuthentication no");
    _builder.newLine();
    _builder.append("RhostsRSAAuthentication yes");
    _builder.newLine();
    _builder.append("RSAAuthentication no ");
    _builder.newLine();
    _builder.append("PasswordAuthentication yes");
    _builder.newLine();
    _builder.append("PermitEmptyPasswords no");
    _builder.newLine();
    _builder.append("PermitRootLogin yes");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getInit(final String jarName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/bin/bash");
    _builder.newLine();
    _builder.append("set -e");
    _builder.newLine();
    _builder.append("echo \"Starting SSH ...\"");
    _builder.newLine();
    _builder.append("service ssh start");
    _builder.newLine();
    _builder.append("java -jar /usr/src/");
    _builder.append(jarName);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getDockerFile(final String jarName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("FROM openjdk:8-jre");
    _builder.newLine();
    _builder.append("# ssh");
    _builder.newLine();
    _builder.append("ENV SSH_PASSWD \"root:Docker!\"");
    _builder.newLine();
    _builder.append("RUN apt-get update \\");
    _builder.newLine();
    _builder.append("&& apt-get install -y --no-install-recommends dialog \\");
    _builder.newLine();
    _builder.append("&& apt-get update \\");
    _builder.newLine();
    _builder.append("&& apt-get install -y --no-install-recommends openssh-server \\");
    _builder.newLine();
    _builder.append("&& echo \"$SSH_PASSWD\" | chpasswd ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("COPY scripts/sshd_config /etc/ssh/");
    _builder.newLine();
    _builder.append("COPY scripts/init.sh /usr/local/bin/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("RUN chmod a+x /usr/local/bin/init.sh");
    _builder.newLine();
    _builder.append("EXPOSE 8080 2222");
    _builder.newLine();
    _builder.append("COPY  target/");
    _builder.append(jarName);
    _builder.append(" /usr/src/");
    _builder.append(jarName);
    _builder.newLineIfNotEmpty();
    _builder.append("RUN chmod a+x /usr/src/");
    _builder.append(jarName);
    _builder.newLineIfNotEmpty();
    _builder.append("ENTRYPOINT [\"init.sh\"]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getWebSocketConfig(final String networkName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.config.annotation.EnableWebSocket;");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.config.annotation.WebSocketConfigurer;");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("@EnableWebSocket ");
    _builder.newLine();
    _builder.append("public class WebSocketConfig implements WebSocketConfigurer { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SocketHandler socketHandler;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("registry.addHandler(socketHandler, \"/iopod\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getSocketHandler(final String networkName, final HashMap<String, String> portNames) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import net.sf.orcc.runtime.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component; ");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.TextMessage; ");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.WebSocketSession; ");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.CloseStatus;");
    _builder.newLine();
    _builder.append("import org.springframework.web.socket.handler.TextWebSocketHandler; ");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Qualifier;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.core.JmsTemplate;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.listener.MessageListenerContainer;");
    _builder.newLine();
    _builder.append("import org.springframework.jms.listener.DefaultMessageListenerContainer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.concurrent.CopyOnWriteArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import javax.jms.MessageListener;");
    _builder.newLine();
    _builder.append("import javax.jms.Message;");
    _builder.newLine();
    _builder.append("import javax.jms.JMSException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.node.ObjectNode;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.JsonNode;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Component ");
    _builder.newLine();
    _builder.append("public class SocketHandler extends TextWebSocketHandler {");
    _builder.newLine();
    {
      Set<String> _keySet = portNames.keySet();
      for(final String pn : _keySet) {
        _builder.append("\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Qualifier(\"");
        _builder.append(pn, "\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("JmsTemplate ");
        _builder.append(pn, "\t");
        _builder.append("_template;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("HashMap<String,WebSocketSession> podToWssMap = new HashMap<String,WebSocketSession>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HashMap<WebSocketSession,DataPerWss> wssToPodMap = new HashMap<WebSocketSession,DataPerWss>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<WebSocketSession> sessions = new CopyOnWriteArrayList<WebSocketSession>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger LOGGER = Logger.getLogger( SocketHandler.class.getName() );");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void handleTextMessage(WebSocketSession session, TextMessage message)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throws InterruptedException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info( \"");
    String _string = portNames.keySet().toString();
    _builder.append(_string, "\t\t");
    _builder.append("\" );");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("String ioPod = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String on_s = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("long tStamp = 0L;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ObjectMapper mapper = new ObjectMapper(); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JsonNode root = mapper.readTree(message.getPayload());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (root.path(\"type\").textValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case \"Integer\": IntegerJSONToken tokenI = mapper.readValue( message.getPayload(), IntegerJSONToken.class );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("on_s = mapper.writeValueAsString( tokenI );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ioPod = tokenI.pod;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tStamp = tokenI.timeStamp;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info(\"TokenInt received by the websocket interface: \" + tokenI);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case \"String\" : StringJSONToken tokenS = mapper.readValue( message.getPayload(), StringJSONToken.class );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("on_s = mapper.writeValueAsString( tokenS );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ioPod = tokenS.pod;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tStamp = tokenS.timeStamp;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info(\"TokenString received by the websocket interface: \" + tokenS);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case \"Float\"  : FloatJSONToken tokenF = mapper.readValue( message.getPayload(), FloatJSONToken.class );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("on_s = mapper.writeValueAsString( tokenF );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ioPod = tokenF.pod;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tStamp = tokenF.timeStamp;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info(\"TokenFloat received by the websocket interface: \" + tokenF);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if( ioPod != null ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// This is a subscription token, the sender wants to receive messages going out to the indicated pod");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if( tStamp == 0L ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("subscribeSession( ioPod, session );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    {
      Set<String> _keySet_1 = portNames.keySet();
      for(final String pn_1 : _keySet_1) {
        {
          boolean _startsWith = pn_1.startsWith("i");
          if (_startsWith) {
            _builder.append("\t\t\t\t\t");
            _builder.append("if( ioPod.equals( \"");
            _builder.append(pn_1, "\t\t\t\t\t");
            _builder.append("\" ) )");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("\t");
            _builder.append(pn_1, "\t\t\t\t\t\t");
            _builder.append("_template.convertAndSend( ioPod, on_s);\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append("//TO-DO awful solution, starts wiht i is terrible\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch( JsonProcessingException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log( Level.SEVERE,\"handleTextMessage\",ex );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch( IOException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log( Level.SEVERE,\"handleTextMessage\",ex );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void afterConnectionEstablished(WebSocketSession session) throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sessions.add(session);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//the messages will be broadcasted to all users.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sessions.remove(session);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unsubscribeSession( session );");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void subscribeSession( String pod, WebSocketSession session ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("OutputPodMessageListener listener = new OutputPodMessageListener( session );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DataPerWss dataItem = new DataPerWss( pod, listener );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WebSocketSession oldSession = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized( podToWssMap ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("oldSession = podToWssMap.get( pod );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if( oldSession != null )");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("unsubscribeSession( oldSession );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized( podToWssMap ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("podToWssMap.put( pod, session );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("wssToPodMap.put( session, dataItem );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      Set<String> _keySet_2 = portNames.keySet();
      for(final String pn_2 : _keySet_2) {
        {
          boolean _startsWith_1 = pn_2.startsWith("o");
          if (_startsWith_1) {
            _builder.append("\t\t");
            _builder.append("if( pod.equals( \"");
            _builder.append(pn_2, "\t\t");
            _builder.append("\" ) )  //TO-DO this is awful solution, starts wiht o is bad... ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("startListener( listener, ");
            _builder.append(pn_2, "\t\t");
            _builder.append("_template, \"");
            _builder.append(pn_2, "\t\t");
            _builder.append("\",dataItem );");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void unsubscribeSession( WebSocketSession session ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MessageListenerContainer container1 = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MessageListenerContainer container2 = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized( podToWssMap ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DataPerWss dataItem = wssToPodMap.get( session );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String podName = dataItem.podName;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container1 = dataItem.container1;\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container2 = dataItem.container2;\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("podToWssMap.remove( podName );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("wssToPodMap.remove( session );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if( container1 != null )");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container1.stop();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if( container2 != null )");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container2.stop();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void startListener( OutputPodMessageListener listener, JmsTemplate template, String queueName, DataPerWss item ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DefaultMessageListenerContainer messageListener1 = new DefaultMessageListenerContainer();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.setDestinationName( queueName+\"/ConsumerGroups/$Default/Partitions/0\" );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.setConnectionFactory( template.getConnectionFactory());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.setMessageListener( listener );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.setPubSubDomain(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.initialize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener1.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DefaultMessageListenerContainer messageListener2 = new DefaultMessageListenerContainer();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.setDestinationName( queueName+\"/ConsumerGroups/$Default/Partitions/1\" );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.setConnectionFactory( template.getConnectionFactory());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.setMessageListener( listener );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.setPubSubDomain(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.initialize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageListener2.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("item.setContainers( messageListener1, messageListener2 );");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class DataPerWss {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String podName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public OutputPodMessageListener listener;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public MessageListenerContainer container1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public MessageListenerContainer container2;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public DataPerWss( String podName, OutputPodMessageListener listener ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.podName = podName;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.listener = listener;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setContainers( MessageListenerContainer container1, MessageListenerContainer container2 ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.container1 = container1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.container2 = container2;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class OutputPodMessageListener implements MessageListener {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public OutputPodMessageListener( WebSocketSession session ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.session = session;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void onMessage(Message message) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info( \"OutputPodMessageListener: \"+message );");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if( message instanceof javax.jms.TextMessage ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String payload = ((javax.jms.TextMessage)message).getText();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LOGGER.info( \"payload: \"+payload );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("TextMessage wssMsg = new TextMessage( payload.getBytes() );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("boolean repeat = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while( repeat ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("session.sendMessage( wssMsg );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("repeat = false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch( IllegalStateException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("LOGGER.info( \"*** IllegalStateException when sending\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep( 1000L );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch( InterruptedException ex1 ) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch( IOException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.log( Level.SEVERE,\"onMessage\",ex );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch( JMSException ex ) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.log( Level.SEVERE,\"onMessage\",ex );");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WebSocketSession session;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getIDBRepository(final String networkName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;");
    _builder.newLine();
    _builder.append("import org.springframework.data.mongodb.repository.MongoRepository;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Component");
    _builder.newLine();
    _builder.append("public interface IDBRepository extends MongoRepository<DBRepository, String> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<DBRepository> findByportName(String portName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<DBRepository> findBytokenType(String type);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getDBRepository(final String networkName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(networkName);
    _builder.append(";\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.data.annotation.Id;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class DBRepository<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Id");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String IO;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String portName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public long timeReceived;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public T tokenValue;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public long tokenTStamp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String tokenPod;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String tokenType;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DBRepository (String io, String pn, long tr, T v, long ts, String p, String t) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.IO = io;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.portName = pn;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.timeReceived = tr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.tokenValue = v;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.tokenTStamp = ts;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.tokenPod = p;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.tokenType = t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getSpringAppProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("spring.data.mongodb.database=");
    _builder.append(this.azure_db_name);
    _builder.newLineIfNotEmpty();
    _builder.append("spring.data.mongodb.uri=");
    _builder.append(this.azure_db_URI);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
