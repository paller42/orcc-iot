/**
 * Copyright (c) 2012, IETR/INSA of Rennes
 * All rights reserved.
 * 4
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * about
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package net.sf.orcc.backends.c.hls;

import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * sim_package and  ram_tab
 * 
 * @author Antoine Lorence, Khaled Jerbi and Mariem Abid
 */
@SuppressWarnings("all")
public class NetworkPrinter extends net.sf.orcc.backends.c.NetworkPrinter {
  /**
   * Generic FIFO
   */
  public CharSequence fifoFileContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("library ieee; ");
    _builder.newLine();
    _builder.append("use ieee.std_logic_1164.all; ");
    _builder.newLine();
    _builder.append("use ieee.std_logic_unsigned.all;");
    _builder.newLine();
    _builder.append("entity ram_tab is ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("generic(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("dwidth     : integer := 32; ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("awidth     : integer := ");
    int _closestLog_2 = this.closestLog_2(this.fifoSize);
    _builder.append(_closestLog_2, "            ");
    _builder.append("; ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("mem_size    : integer := ");
    _builder.append(this.fifoSize, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("); ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("port (");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("addr0     : in std_logic_vector(awidth-1 downto 0); ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("ce0       : in std_logic; ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("q0        : out std_logic_vector(dwidth-1 downto 0);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("addr1     : in std_logic_vector(awidth-1 downto 0); ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("ce1       : in std_logic; ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("d1        : in std_logic_vector(dwidth-1 downto 0); ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("we1       : in std_logic; ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("clk        : in std_logic ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("); ");
    _builder.newLine();
    _builder.append("end entity; ");
    _builder.newLine();
    _builder.append("architecture rtl of ram_tab is ");
    _builder.newLine();
    _builder.append("type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); ");
    _builder.newLine();
    _builder.append("shared variable ram : mem_array := (others=>(others=>\'0\'));");
    _builder.newLine();
    _builder.append("begin ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("p_memory_access_1: process (clk)  ");
    _builder.newLine();
    _builder.append("begin ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (clk\'event and clk = \'1\') then");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ce1 = \'1\') then ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (we1 = \'1\') then ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ram(CONV_INTEGER(addr1)) := d1; ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("end process;");
    _builder.newLine();
    _builder.append("p_memory_access_0: process (clk)  ");
    _builder.newLine();
    _builder.append("begin ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (clk\'event and clk = \'1\') then");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("if (ce0 = \'1\') then ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("q0 <= ram(CONV_INTEGER(addr0)); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("end process;");
    _builder.newLine();
    _builder.append("end rtl;");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Sim Package
   */
  public CharSequence fifoSimPackContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("library ieee;");
    _builder.newLine();
    _builder.append("use ieee.std_logic_1164.all;");
    _builder.newLine();
    _builder.append("use std.textio.all;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package sim_package is");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic into a character");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function chr(sl : std_logic) return character;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic into a string (1 to 1)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(sl : std_logic) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic_vector into a string (binary base)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(slv : std_logic_vector) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts boolean into a string");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(b : boolean) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts an integer into a single character");
    _builder.newLine();
    _builder.append("-- (can also be used for hex conversion and other bases)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function chr(int : integer) return character;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts integer into string using specified base");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(int : integer; base : integer) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts integer to string, using base 10");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(int : integer) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- convert std_logic_vector into a string in hex format");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function hstr(slv : std_logic_vector) return string;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("end sim_package;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package body sim_package is");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic into a character");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function chr(sl : std_logic) return character is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable c : character;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case sl is");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'U\' => c := \'U\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'X\' => c := \'X\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'0\' => c := \'0\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'1\' => c := \'1\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'Z\' => c := \'Z\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'W\' => c := \'W\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'L\' => c := \'L\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'H\' => c := \'H\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when \'-\' => c := \'-\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end case;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return c;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end chr;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic into a string (1 to 1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(sl : std_logic) return string is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable s : string(1 to 1);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("s(1) := chr(sl);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return s;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end str;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts std_logic_vector into a string (binary base)");
    _builder.newLine();
    _builder.append("-- (this also takes care of the fact that the range of");
    _builder.newLine();
    _builder.append("-- a string is natural while a std_logic_vector may");
    _builder.newLine();
    _builder.append("-- have an integer range)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(slv : std_logic_vector) return string is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable result : string (1 to slv\'length);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable r      : integer;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("r := 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for i in slv\'range loop");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("result(r) := chr(slv(i));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("r         := r + 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end loop;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end str;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(b : boolean) return string is");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if b then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return \"true\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return \"false\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end str;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts an integer into a character");
    _builder.newLine();
    _builder.append("-- for 0 to 9 the obvious mapping is used, higher");
    _builder.newLine();
    _builder.append("-- values are mapped to the characters A-Z");
    _builder.newLine();
    _builder.append("-- (this is usefull for systems with base > 10)");
    _builder.newLine();
    _builder.append("-- (adapted from Steve Vogwell\'s posting in comp.lang.vhdl)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function chr(int : integer) return character is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable c : character;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case int is");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 0      => c := \'0\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 1      => c := \'1\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 2      => c := \'2\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 3      => c := \'3\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 4      => c := \'4\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 5      => c := \'5\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 6      => c := \'6\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 7      => c := \'7\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 8      => c := \'8\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 9      => c := \'9\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 10     => c := \'A\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 11     => c := \'B\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 12     => c := \'C\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 13     => c := \'D\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 14     => c := \'E\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 15     => c := \'F\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 16     => c := \'G\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 17     => c := \'H\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 18     => c := \'I\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 19     => c := \'J\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 20     => c := \'K\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 21     => c := \'L\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 22     => c := \'M\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 23     => c := \'N\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 24     => c := \'O\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 25     => c := \'P\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 26     => c := \'Q\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 27     => c := \'R\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 28     => c := \'S\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 29     => c := \'T\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 30     => c := \'U\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 31     => c := \'V\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 32     => c := \'W\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 33     => c := \'X\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 34     => c := \'Y\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when 35     => c := \'Z\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("when others => c := \'?\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end case;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return c;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end chr;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- convert integer to string using specified base");
    _builder.newLine();
    _builder.append("-- (adapted from Steve Vogwell\'s posting in comp.lang.vhdl)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(int : integer; base : integer) return string is");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable temp    : string(1 to 10);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable num     : integer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable abs_int : integer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable len     : integer := 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable power   : integer := 1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- bug fix for negative numbers");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("abs_int := abs(int);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("num := abs_int;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while num >= base loop              -- Determine how many");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("len := len + 1;                   -- characters required");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("num := num / base;                -- to represent the");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end loop;  -- number.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for i in len downto 1 loop                 -- Convert the number to");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("temp(i) := chr(abs_int/power mod base);  -- a string starting");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("power   := power * base;                 -- with the right hand");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end loop;  -- side.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- return result and add sign if required");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if int < 0 then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return \'-\'& temp(1 to len);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return temp(1 to len);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end str;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- convert integer to string, using base 10");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function str(int : integer) return string is");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return str(int, 10);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end str;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- converts a std_logic_vector into a hex string.");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("function hstr(slv : std_logic_vector) return string is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable hexlen : integer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable longslv : std_logic_vector(67 downto 0) := (others =>");
    _builder.newLine();
    _builder.append("                                                         ");
    _builder.append("\'0\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable hex     : string(1 to 16);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("variable fourbit : std_logic_vector(3 downto 0);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("hexlen := (slv\'left+1)/4;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (slv\'left+1) mod 4 /= 0 then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("hexlen := hexlen + 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end if;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("longslv(slv\'left downto 0) := slv;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for i in (hexlen -1) downto 0 loop");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fourbit := longslv(((i*4)+3) downto (i*4));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("case fourbit is");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0000\" => hex(hexlen -I) := \'0\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0001\" => hex(hexlen -I) := \'1\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0010\" => hex(hexlen -I) := \'2\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0011\" => hex(hexlen -I) := \'3\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0100\" => hex(hexlen -I) := \'4\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0101\" => hex(hexlen -I) := \'5\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0110\" => hex(hexlen -I) := \'6\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"0111\" => hex(hexlen -I) := \'7\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1000\" => hex(hexlen -I) := \'8\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1001\" => hex(hexlen -I) := \'9\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1010\" => hex(hexlen -I) := \'A\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1011\" => hex(hexlen -I) := \'B\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1100\" => hex(hexlen -I) := \'C\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1101\" => hex(hexlen -I) := \'D\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1110\" => hex(hexlen -I) := \'E\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"1111\" => hex(hexlen -I) := \'F\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"ZZZZ\" => hex(hexlen -I) := \'z\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"UUUU\" => hex(hexlen -I) := \'u\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when \"XXXX\" => hex(hexlen -I) := \'x\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when others => hex(hexlen -I) := \'?\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end case;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end loop;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return hex(1 to hexlen);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end hstr;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("end sim_package;");
    _builder.newLine();
    return _builder;
  }
  
  public int closestLog_2(final int x) {
    int p = 1;
    int r = 0;
    while ((p < x)) {
      {
        p = (p * 2);
        r = (r + 1);
      }
    }
    return r;
  }
}
