/**
 * Copyright (c) 2012, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package net.sf.orcc.backends.llvm.tta;

import net.sf.orcc.backends.llvm.tta.TTAPrinter;
import net.sf.orcc.backends.llvm.tta.architecture.Design;
import net.sf.orcc.backends.llvm.tta.architecture.Memory;
import net.sf.orcc.backends.llvm.tta.architecture.Processor;
import net.sf.orcc.backends.util.FPGA;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class HwProjectPrinter extends TTAPrinter {
  private FPGA fpga;
  
  public FPGA setFpga(final FPGA fpga) {
    return this.fpga = fpga;
  }
  
  public CharSequence getQcf(final Design design) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# Quartus II Project");
    _builder.newLine();
    _builder.append("# Generated by Orcc");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Board informations");
    _builder.newLine();
    _builder.append("set_global_assignment -name FAMILY \"");
    FPGA.Family _family = this.fpga.getFamily();
    _builder.append(_family);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name DEVICE ");
    String _device = this.fpga.getDevice();
    _builder.append(_device);
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name TOP_LEVEL_ENTITY top");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Network");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE top.vhd");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Processor> _processors = design.getProcessors();
      for(final Processor processor : _processors) {
        CharSequence _qcf = this.getQcf(processor);
        _builder.append(_qcf);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("# Shared components");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/util_pkg.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/tce_util_pkg.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/rf_1wr_1rd_always_1_guarded_0.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/mul.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/ldh_ldhu_ldq_ldqu_ldw_sth_stq_stw.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/and_ior_xor.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/add_and_eq_gt_gtu_ior_shl_shr_shru_sub_sxhw_sxqw_xor.vhdl");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE share/vhdl/stratix3_led_io_always_1.vhd");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Other components");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE wrapper/altera_ram_1p.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE wrapper/altera_ram_2p.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE wrapper/altera_rom.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE interface/counter.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE interface/fps_eval.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE interface/segment_display_conv.vhd");
    _builder.newLine();
    _builder.append("set_global_assignment -name VHDL_FILE interface/segment_display_sel.vhd");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Pin assignments");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_F21 -to leds[0]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_C23 -to leds[1]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_B23 -to leds[2]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_A23 -to leds[3]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_D19 -to leds[4]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_C19 -to leds[5]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_F19 -to leds[6]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_E19 -to leds[7]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AP5 -to rst_n");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_T33 -to clk");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AE10 -to segment7[0]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AL5  -to segment7[1]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AC12 -to segment7[2]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AM5  -to segment7[3]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AF11 -to segment7[4]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AM6  -to segment7[5]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AP3  -to segment7[6]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AM4  -to segment7_sel[0]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AE12 -to segment7_sel[1]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AL4  -to segment7_sel[2]");
    _builder.newLine();
    _builder.append("set_location_assignment PIN_AH8  -to segment7_sel[3]");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getQcf(final Processor processor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# Processor ");
    String _name = processor.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_1 = processor.getName();
    _builder.append(_name_1);
    _builder.append("/tta/vhdl/");
    String _name_2 = processor.getName();
    _builder.append(_name_2);
    _builder.append("_tl_params_pkg.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_3 = processor.getName();
    _builder.append(_name_3);
    _builder.append("/tta/vhdl/");
    String _name_4 = processor.getName();
    _builder.append(_name_4);
    _builder.append("_tl.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_5 = processor.getName();
    _builder.append(_name_5);
    _builder.append("/tta/vhdl/");
    String _name_6 = processor.getName();
    _builder.append(_name_6);
    _builder.append("_tl_globals_pkg.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_7 = processor.getName();
    _builder.append(_name_7);
    _builder.append("/tta/vhdl/");
    String _name_8 = processor.getName();
    _builder.append(_name_8);
    _builder.append("_mem_constants_pkg.vhd");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_9 = processor.getName();
    _builder.append(_name_9);
    _builder.append("/tta/vhdl/");
    String _name_10 = processor.getName();
    _builder.append(_name_10);
    _builder.append(".vhd");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_11 = processor.getName();
    _builder.append(_name_11);
    _builder.append("/tta/vhdl/");
    String _name_12 = processor.getName();
    _builder.append(_name_12);
    _builder.append("_tl_imem_mau_pkg.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_13 = processor.getName();
    _builder.append(_name_13);
    _builder.append("/tta/gcu_ic/output_socket_");
    int _size = processor.getBuses().size();
    _builder.append(_size);
    _builder.append("_1.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_14 = processor.getName();
    _builder.append(_name_14);
    _builder.append("/tta/gcu_ic/output_socket_1_1.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_15 = processor.getName();
    _builder.append(_name_15);
    _builder.append("/tta/gcu_ic/input_socket_");
    int _size_1 = processor.getBuses().size();
    _builder.append(_size_1);
    _builder.append(".vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_16 = processor.getName();
    _builder.append(_name_16);
    _builder.append("/tta/gcu_ic/ifetch.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_17 = processor.getName();
    _builder.append(_name_17);
    _builder.append("/tta/gcu_ic/idecompressor.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_18 = processor.getName();
    _builder.append(_name_18);
    _builder.append("/tta/gcu_ic/ic.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_19 = processor.getName();
    _builder.append(_name_19);
    _builder.append("/tta/gcu_ic/gcu_opcodes_pkg.vhdl");
    _builder.newLineIfNotEmpty();
    _builder.append("set_global_assignment -name VHDL_FILE ");
    String _name_20 = processor.getName();
    _builder.append(_name_20);
    _builder.append("/tta/gcu_ic/decoder.vhdl");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getQpf(final Design design) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# Quartus II Project");
    _builder.newLine();
    _builder.append("# Generated by Orcc");
    _builder.newLine();
    _builder.newLine();
    _builder.append("PROJECT_REVISION = \"top\"");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getXise(final Design design) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>");
    _builder.newLine();
    _builder.append("<project xmlns=\"http://www.xilinx.com/XMLSchema\" xmlns:xil_pn=\"http://www.xilinx.com/XMLSchema\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<header>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- ISE source project file created by the Open RVC-CAL Compiler      -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                                                                   -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- This file contains project source information including a list of -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- project source files, project and process properties.  This file, -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- along with the project source files, is sufficient to open and    -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- implement in ISE Project Navigator.                               -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                                                                   -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</header>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<files>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"top.ucf\" xil_pn:type=\"FILE_UCF\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"top.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Processor> _processors = design.getProcessors();
      for(final Processor processor : _processors) {
        _builder.append("\t");
        CharSequence _xise = this.getXise(processor);
        _builder.append(_xise, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Memory> _sharedMemories = design.getSharedMemories();
      for(final Memory memory : _sharedMemories) {
        _builder.append("\t");
        CharSequence _xise_1 = this.getXise(memory);
        _builder.append(_xise_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                   -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Shared components.-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                   -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/util_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/tce_util_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/rf_1wr_1rd_always_1_guarded_0.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/mul.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/ldh_ldhu_ldq_ldqu_ldw_sth_stq_stw.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"share/vhdl/add_and_eq_gt_gtu_ior_shl_shr_shru_sub_sxhw_sxqw_xor.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    {
      boolean _isEmpty = design.getOutputs().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("    ");
        _builder.append("<file xil_pn:name=\"share/vhdl/stratix3_led_io_always_1.vhd\" xil_pn:type=\"FILE_VHDL\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("<association xil_pn:name=\"Implementation\"/>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("</file>");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                  -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Other components.-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                  -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"interface/counter.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"interface/fps_eval.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"interface/segment_display_conv.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<file xil_pn:name=\"interface/segment_display_sel.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</file>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</files>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Auto Implementation Top\" xil_pn:value=\"false\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Implementation Top\" xil_pn:value=\"Architecture|top|bdf_type\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Implementation Top File\" xil_pn:value=\"top.vhd\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Implementation Top Instance Path\" xil_pn:value=\"/top\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Device Family\" xil_pn:value=\"");
    FPGA.Family _family = this.fpga.getFamily();
    _builder.append(_family, "    ");
    _builder.append("\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Device\" xil_pn:value=\"");
    String _device = this.fpga.getDevice();
    _builder.append(_device, "    ");
    _builder.append("\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Package\" xil_pn:value=\"");
    String _package = this.fpga.getPackage();
    _builder.append(_package, "    ");
    _builder.append("\" xil_pn:valueState=\"default\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<property xil_pn:name=\"Speed Grade\" xil_pn:value=\"-1\" xil_pn:valueState=\"non-default\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<bindings/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<libraries/>printUcf");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<autoManagedFiles>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- The following files are identified by `include statements in verilog -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- source files and are automatically managed by Project Navigator.     -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--                                                                      -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Do not hand-edit this section, as it will be overwritten when the    -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- project is analyzed based on files automatically identified as       -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- include files.                                                       -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</autoManagedFiles>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getXise(final Processor processor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!-- Processor ");
    String _name = processor.getName();
    _builder.append(_name);
    _builder.append(" -->");
    _builder.newLineIfNotEmpty();
    _builder.append("<file xil_pn:name=\"");
    String _name_1 = processor.getName();
    _builder.append(_name_1);
    _builder.append("/tta/vhdl/");
    String _name_2 = processor.getName();
    _builder.append(_name_2);
    _builder.append("_tl_params_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_3 = processor.getName();
    _builder.append(_name_3);
    _builder.append("/tta/vhdl/");
    String _name_4 = processor.getName();
    _builder.append(_name_4);
    _builder.append("_tl.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_5 = processor.getName();
    _builder.append(_name_5);
    _builder.append("/tta/vhdl/");
    String _name_6 = processor.getName();
    _builder.append(_name_6);
    _builder.append("_tl_globals_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_7 = processor.getName();
    _builder.append(_name_7);
    _builder.append("/tta/vhdl/");
    String _name_8 = processor.getName();
    _builder.append(_name_8);
    _builder.append(".vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_9 = processor.getName();
    _builder.append(_name_9);
    _builder.append("/tta/vhdl/");
    String _name_10 = processor.getName();
    _builder.append(_name_10);
    _builder.append("_tl_imem_mau_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_11 = processor.getName();
    _builder.append(_name_11);
    _builder.append("/tta/vhdl/");
    String _name_12 = processor.getName();
    _builder.append(_name_12);
    _builder.append("_mem_constants_pkg.vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_13 = processor.getName();
    _builder.append(_name_13);
    _builder.append("/tta/gcu_ic/output_socket_");
    int _size = processor.getBuses().size();
    _builder.append(_size);
    _builder.append("_1.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_14 = processor.getName();
    _builder.append(_name_14);
    _builder.append("/tta/gcu_ic/output_socket_1_1.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_15 = processor.getName();
    _builder.append(_name_15);
    _builder.append("/tta/gcu_ic/input_socket_");
    int _size_1 = processor.getBuses().size();
    _builder.append(_size_1);
    _builder.append(".vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulationprintUcf\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_16 = processor.getName();
    _builder.append(_name_16);
    _builder.append("/tta/gcu_ic/ifetch.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_17 = processor.getName();
    _builder.append(_name_17);
    _builder.append("/tta/gcu_ic/idecompressor.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_18 = processor.getName();
    _builder.append(_name_18);
    _builder.append("/tta/gcu_ic/ic.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_19 = processor.getName();
    _builder.append(_name_19);
    _builder.append("/tta/gcu_ic/gcu_opcodes_pkg.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_20 = processor.getName();
    _builder.append(_name_20);
    _builder.append("/tta/gcu_ic/decoder.vhdl\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_21 = processor.getName();
    _builder.append(_name_21);
    _builder.append("/tta/vhdl/irom_");
    String _name_22 = processor.getName();
    _builder.append(_name_22);
    _builder.append(".vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_23 = processor.getName();
    _builder.append(_name_23);
    _builder.append("/tta/vhdl/irom_");
    String _name_24 = processor.getName();
    _builder.append(_name_24);
    _builder.append(".ngc\" xil_pn:type=\"FILE_NGC\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_25 = processor.getName();
    _builder.append(_name_25);
    _builder.append("/tta/vhdl/dram_");
    String _name_26 = processor.getName();
    _builder.append(_name_26);
    _builder.append(".vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"");
    String _name_27 = processor.getName();
    _builder.append(_name_27);
    _builder.append("/tta/vhdl/dram_");
    String _name_28 = processor.getName();
    _builder.append(_name_28);
    _builder.append(".ngc\" xil_pn:type=\"FILE_NGC\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence getXise(final Memory memory) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<file xil_pn:name=\"wrapper/dram_2p_");
    String _name = memory.getName();
    _builder.append(_name);
    _builder.append(".ngc\" xil_pn:type=\"FILE_NGC\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    _builder.append("<file xil_pn:name=\"wrapper/dram_2p_");
    String _name_1 = memory.getName();
    _builder.append(_name_1);
    _builder.append(".vhd\" xil_pn:type=\"FILE_VHDL\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"BehavioralSimulation\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<association xil_pn:name=\"Implementation\"/>");
    _builder.newLine();
    _builder.append("</file>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getUcf(final Design design) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("NET \"leds[0]\" IOSTANDARD = LVCMOS18;");
    _builder.newLine();
    {
      boolean _isZedBoard = this.fpga.isZedBoard();
      if (_isZedBoard) {
        _builder.append("NET \"leds[0]\" LOC = T22;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[0]\" LOC = AC22;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[1]\" IOSTANDARD = LVCMOS18;");
    _builder.newLine();
    {
      boolean _isZedBoard_1 = this.fpga.isZedBoard();
      if (_isZedBoard_1) {
        _builder.append("NET \"leds[1]\" LOC = T21;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[1]\" LOC = AC24;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[2]\" IOSTANDARD = LVCMOS18;");
    _builder.newLine();
    {
      boolean _isZedBoard_2 = this.fpga.isZedBoard();
      if (_isZedBoard_2) {
        _builder.append("NET \"leds[2]\" LOC = U22;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[2]\" LOC = AE22;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[3]\" IOSTANDARD = LVCMOS18;\t\t// LVCMOS25");
    _builder.newLine();
    {
      boolean _isZedBoard_3 = this.fpga.isZedBoard();
      if (_isZedBoard_3) {
        _builder.append("NET \"leds[3]\" LOC = U21;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[3]\" LOC = AE23;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[4]\" IOSTANDARD = LVCMOS18;");
    _builder.newLine();
    {
      boolean _isZedBoard_4 = this.fpga.isZedBoard();
      if (_isZedBoard_4) {
        _builder.append("NET \"leds[4]\" LOC = V22;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[4]\" LOC = AB23;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[5]\" IOSTANDARD = LVCMOS18;\t\t// LVCMOS25");
    _builder.newLine();
    {
      boolean _isZedBoard_5 = this.fpga.isZedBoard();
      if (_isZedBoard_5) {
        _builder.append("NET \"leds[5]\" LOC = W22;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[5]\" LOC = AG23;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[6]\" IOSTANDARD = LVCMOS18;\t\t// LVCMOS25");
    _builder.newLine();
    {
      boolean _isZedBoard_6 = this.fpga.isZedBoard();
      if (_isZedBoard_6) {
        _builder.append("NET \"leds[6]\" LOC = U19;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[6]\" LOC = AE24;");
        _builder.newLine();
      }
    }
    _builder.append("NET \"leds[7]\" IOSTANDARD = LVCMOS18;\t\t// LVCMOS25");
    _builder.newLine();
    {
      boolean _isZedBoard_7 = this.fpga.isZedBoard();
      if (_isZedBoard_7) {
        _builder.append("NET \"leds[7]\" LOC = U14;");
        _builder.newLine();
      } else {
        _builder.append("NET \"leds[7]\" LOC = AD24;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("NET \"rst_n\" TIG;");
    _builder.newLine();
    _builder.append("//LVCMOS33");
    _builder.newLine();
    _builder.append("NET \"rst_n\" IOSTANDARD = LVCMOS25;");
    _builder.newLine();
    _builder.append("NET \"rst_n\" PULLUP;");
    _builder.newLine();
    _builder.append("NET \"rst_n\" LOC = D22;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("NET \"clk\" TNM_NET = \"sys_clk_pin\";");
    _builder.newLine();
    _builder.append("NET \"clk\" CLOCK_DEDICATED_ROUTE = FALSE;");
    _builder.newLine();
    _builder.append("TIMESPEC TS_sys_clk_pin = PERIOD \"sys_clk_pin\" 100000 KHz;");
    _builder.newLine();
    _builder.append("//LVCMOS33");
    _builder.newLine();
    _builder.append("NET \"clk\" IOSTANDARD = LVCMOS25;");
    _builder.newLine();
    {
      boolean _isZedBoard_8 = this.fpga.isZedBoard();
      if (_isZedBoard_8) {
        _builder.append("NET \"clk\" LOC = Y9;");
        _builder.newLine();
      } else {
        _builder.append("NET \"clk\" LOC = AE16;");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
