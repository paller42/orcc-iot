/*
 * generated by Xtext
 */
package net.sf.orcc.cal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AstEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cPackageAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cActorKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_0_1_0 = (RuleCall)cNameAssignment_3_0_1.eContents().get(0);
		private final Assignment cActorAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cActorAstActorParserRuleCall_3_0_2_0 = (RuleCall)cActorAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_1_0 = (RuleCall)cNameAssignment_3_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cUnitAstUnitParserRuleCall_3_1_2_0 = (RuleCall)cUnitAssignment_3_1_2.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// top-level entity
		/////////////////////////////////////////////////////////////////////////////////
		//AstEntity:
		//	('package' package=QualifiedName ';')?
		//	imports+=Import*
		//	annotations+=AstAnnotation* ('actor' name=ID actor=AstActor | 'unit' name=ID unit=AstUnit);
		@Override public ParserRule getRule() { return rule; }

		//('package' package=QualifiedName ';')? imports+=Import* annotations+=AstAnnotation* ('actor' name=ID actor=AstActor |
		//'unit' name=ID unit=AstUnit)
		public Group getGroup() { return cGroup; }

		//('package' package=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }

		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_0_1() { return cPackageAssignment_0_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_0_1_0() { return cPackageQualifiedNameParserRuleCall_0_1_0; }

		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_2_0() { return cAnnotationsAstAnnotationParserRuleCall_2_0; }

		//('actor' name=ID actor=AstActor | 'unit' name=ID unit=AstUnit)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//'actor' name=ID actor=AstActor
		public Group getGroup_3_0() { return cGroup_3_0; }

		//'actor'
		public Keyword getActorKeyword_3_0_0() { return cActorKeyword_3_0_0; }

		//name=ID
		public Assignment getNameAssignment_3_0_1() { return cNameAssignment_3_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_1_0() { return cNameIDTerminalRuleCall_3_0_1_0; }

		//actor=AstActor
		public Assignment getActorAssignment_3_0_2() { return cActorAssignment_3_0_2; }

		//AstActor
		public RuleCall getActorAstActorParserRuleCall_3_0_2_0() { return cActorAstActorParserRuleCall_3_0_2_0; }

		//'unit' name=ID unit=AstUnit
		public Group getGroup_3_1() { return cGroup_3_1; }

		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }

		//name=ID
		public Assignment getNameAssignment_3_1_1() { return cNameAssignment_3_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_1_0() { return cNameIDTerminalRuleCall_3_1_1_0; }

		//unit=AstUnit
		public Assignment getUnitAssignment_3_1_2() { return cUnitAssignment_3_1_2; }

		//AstUnit
		public RuleCall getUnitAstUnitParserRuleCall_3_1_2_0() { return cUnitAstUnitParserRuleCall_3_1_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildCard ';';
		@Override public ParserRule getRule() { return rule; }

		//'import' importedNamespace=QualifiedNameWithWildCard ';'
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class AstUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0_0 = (RuleCall)cFunctionsAssignment_2_0.eContents().get(0);
		private final Assignment cProceduresAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_2_1_0 = (RuleCall)cProceduresAssignment_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cVariablesConstantVariableParserRuleCall_2_2_0 = (RuleCall)cVariablesAssignment_2_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// unit
		/////////////////////////////////////////////////////////////////////////////////
		//AstUnit:
		//	{AstUnit} ':' (functions+=Function
		//	| procedures+=AstProcedure
		//	| variables+=ConstantVariable)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{AstUnit} ':' (functions+=Function | procedures+=AstProcedure | variables+=ConstantVariable)* 'end'
		public Group getGroup() { return cGroup; }

		//{AstUnit}
		public Action getAstUnitAction_0() { return cAstUnitAction_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(functions+=Function | procedures+=AstProcedure | variables+=ConstantVariable)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//functions+=Function
		public Assignment getFunctionsAssignment_2_0() { return cFunctionsAssignment_2_0; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0_0() { return cFunctionsFunctionParserRuleCall_2_0_0; }

		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_2_1() { return cProceduresAssignment_2_1; }

		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_2_1_0() { return cProceduresAstProcedureParserRuleCall_2_1_0; }

		//variables+=ConstantVariable
		public Assignment getVariablesAssignment_2_2() { return cVariablesAssignment_2_2; }

		//ConstantVariable
		public RuleCall getVariablesConstantVariableParserRuleCall_2_2_0() { return cVariablesConstantVariableParserRuleCall_2_2_0; }

		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class ConstantVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ConstantVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantEqualsSignKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantVariable Variable:
		//	VariableDeclaration constant?='=' value=AstExpression ';'
		@Override public ParserRule getRule() { return rule; }

		//VariableDeclaration constant?='=' value=AstExpression ';'
		public Group getGroup() { return cGroup; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//constant?='='
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//'='
		public Keyword getConstantEqualsSignKeyword_1_0() { return cConstantEqualsSignKeyword_1_0; }

		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AstActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersActorParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersActorParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInputsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_4_0_0 = (RuleCall)cInputsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInputsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_4_1_1_0 = (RuleCall)cInputsAssignment_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_6_1_1_0 = (RuleCall)cOutputsAssignment_6_1_1.eContents().get(0);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cFunctionsAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_8_0_0 = (RuleCall)cFunctionsAssignment_8_0.eContents().get(0);
		private final Assignment cProceduresAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_8_1_0 = (RuleCall)cProceduresAssignment_8_1.eContents().get(0);
		private final Assignment cActionsAssignment_8_2 = (Assignment)cAlternatives_8.eContents().get(2);
		private final RuleCall cActionsAstActionParserRuleCall_8_2_0 = (RuleCall)cActionsAssignment_8_2.eContents().get(0);
		private final Assignment cInitializesAssignment_8_3 = (Assignment)cAlternatives_8.eContents().get(3);
		private final RuleCall cInitializesInitializeParserRuleCall_8_3_0 = (RuleCall)cInitializesAssignment_8_3.eContents().get(0);
		private final Assignment cStateVariablesAssignment_8_4 = (Assignment)cAlternatives_8.eContents().get(4);
		private final RuleCall cStateVariablesStateVariableParserRuleCall_8_4_0 = (RuleCall)cStateVariablesAssignment_8_4.eContents().get(0);
		private final Assignment cLocalFsmsAssignment_8_5 = (Assignment)cAlternatives_8.eContents().get(5);
		private final RuleCall cLocalFsmsLocalFsmParserRuleCall_8_5_0 = (RuleCall)cLocalFsmsAssignment_8_5.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cScheduleFsmAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cScheduleFsmScheduleFsmParserRuleCall_9_0_0 = (RuleCall)cScheduleFsmAssignment_9_0.eContents().get(0);
		private final Assignment cScheduleRegExpAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cScheduleRegExpScheduleRegExpParserRuleCall_9_1_0 = (RuleCall)cScheduleRegExpAssignment_9_1.eContents().get(0);
		private final Assignment cPrioritiesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPrioritiesPriorityParserRuleCall_10_0 = (RuleCall)cPrioritiesAssignment_10.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// actor
		/////////////////////////////////////////////////////////////////////////////////
		//AstActor:
		//	{AstActor}
		//	'(' (parameters+=ActorParameter (',' parameters+=ActorParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)?
		//	'==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=Function
		//	| procedures+=AstProcedure
		//	| actions+=AstAction
		//	| initializes+=Initialize
		//	| stateVariables+=StateVariable
		//	| localFsms+=LocalFsm)* (scheduleFsm=ScheduleFsm | scheduleRegExp=ScheduleRegExp)?
		//	priorities+=Priority*
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{AstActor} '(' (parameters+=ActorParameter (',' parameters+=ActorParameter)*)? ')' (inputs+=AstPort (','
		//inputs+=AstPort)*)? '==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=Function |
		//procedures+=AstProcedure | actions+=AstAction | initializes+=Initialize | stateVariables+=StateVariable |
		//localFsms+=LocalFsm)* (scheduleFsm=ScheduleFsm | scheduleRegExp=ScheduleRegExp)? priorities+=Priority* 'end'
		public Group getGroup() { return cGroup; }

		//{AstActor}
		public Action getAstActorAction_0() { return cAstActorAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=ActorParameter (',' parameters+=ActorParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=ActorParameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//ActorParameter
		public RuleCall getParametersActorParameterParserRuleCall_2_0_0() { return cParametersActorParameterParserRuleCall_2_0_0; }

		//(',' parameters+=ActorParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=ActorParameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//ActorParameter
		public RuleCall getParametersActorParameterParserRuleCall_2_1_1_0() { return cParametersActorParameterParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(inputs+=AstPort (',' inputs+=AstPort)*)?
		public Group getGroup_4() { return cGroup_4; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_4_0() { return cInputsAssignment_4_0; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_4_0_0() { return cInputsAstPortParserRuleCall_4_0_0; }

		//(',' inputs+=AstPort)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_4_1_1() { return cInputsAssignment_4_1_1; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_4_1_1_0() { return cInputsAstPortParserRuleCall_4_1_1_0; }

		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5; }

		//(outputs+=AstPort (',' outputs+=AstPort)*)?
		public Group getGroup_6() { return cGroup_6; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_6_0_0() { return cOutputsAstPortParserRuleCall_6_0_0; }

		//(',' outputs+=AstPort)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_6_1_1() { return cOutputsAssignment_6_1_1; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_6_1_1_0() { return cOutputsAstPortParserRuleCall_6_1_1_0; }

		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//(functions+=Function | procedures+=AstProcedure | actions+=AstAction | initializes+=Initialize |
		//stateVariables+=StateVariable | localFsms+=LocalFsm)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//functions+=Function
		public Assignment getFunctionsAssignment_8_0() { return cFunctionsAssignment_8_0; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_8_0_0() { return cFunctionsFunctionParserRuleCall_8_0_0; }

		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_8_1() { return cProceduresAssignment_8_1; }

		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_8_1_0() { return cProceduresAstProcedureParserRuleCall_8_1_0; }

		//actions+=AstAction
		public Assignment getActionsAssignment_8_2() { return cActionsAssignment_8_2; }

		//AstAction
		public RuleCall getActionsAstActionParserRuleCall_8_2_0() { return cActionsAstActionParserRuleCall_8_2_0; }

		//initializes+=Initialize
		public Assignment getInitializesAssignment_8_3() { return cInitializesAssignment_8_3; }

		//Initialize
		public RuleCall getInitializesInitializeParserRuleCall_8_3_0() { return cInitializesInitializeParserRuleCall_8_3_0; }

		//stateVariables+=StateVariable
		public Assignment getStateVariablesAssignment_8_4() { return cStateVariablesAssignment_8_4; }

		//StateVariable
		public RuleCall getStateVariablesStateVariableParserRuleCall_8_4_0() { return cStateVariablesStateVariableParserRuleCall_8_4_0; }

		//localFsms+=LocalFsm
		public Assignment getLocalFsmsAssignment_8_5() { return cLocalFsmsAssignment_8_5; }

		//LocalFsm
		public RuleCall getLocalFsmsLocalFsmParserRuleCall_8_5_0() { return cLocalFsmsLocalFsmParserRuleCall_8_5_0; }

		//(scheduleFsm=ScheduleFsm | scheduleRegExp=ScheduleRegExp)?
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//scheduleFsm=ScheduleFsm
		public Assignment getScheduleFsmAssignment_9_0() { return cScheduleFsmAssignment_9_0; }

		//ScheduleFsm
		public RuleCall getScheduleFsmScheduleFsmParserRuleCall_9_0_0() { return cScheduleFsmScheduleFsmParserRuleCall_9_0_0; }

		//scheduleRegExp=ScheduleRegExp
		public Assignment getScheduleRegExpAssignment_9_1() { return cScheduleRegExpAssignment_9_1; }

		//ScheduleRegExp
		public RuleCall getScheduleRegExpScheduleRegExpParserRuleCall_9_1_0() { return cScheduleRegExpScheduleRegExpParserRuleCall_9_1_0; }

		//priorities+=Priority*
		public Assignment getPrioritiesAssignment_10() { return cPrioritiesAssignment_10; }

		//Priority
		public RuleCall getPrioritiesPriorityParserRuleCall_10_0() { return cPrioritiesPriorityParserRuleCall_10_0; }

		//'end'
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}

	public class AstPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AstPort:
		//	annotations+=AstAnnotation* type=AstType name=ID;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* type=AstType name=ID
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeAstTypeParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cGroup_8.eContents().get(0);
		private final Keyword cVarKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cVariablesAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_8_0_1_0 = (RuleCall)cVariablesAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cVariablesAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_8_0_2_1_0 = (RuleCall)cVariablesAssignment_8_0_2_1.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpressionAstExpressionParserRuleCall_8_2_0 = (RuleCall)cExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Function:
		//	annotations+=AstAnnotation*
		//	'function' name=ID
		//	'(' (parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
		//	')' '-->' type=AstType (('var'
		//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ':'
		//	expression=AstExpression)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* 'function' name=ID '(' (parameters+=VariableDeclaration (','
		//parameters+=VariableDeclaration)*)? ')' '-->' type=AstType (('var' variables+=ValuedVariableDeclaration (','
		//variables+=ValuedVariableDeclaration)*)? ':' expression=AstExpression)? 'end'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_4_0_0() { return cParametersVariableDeclarationParserRuleCall_4_0_0; }

		//(',' parameters+=VariableDeclaration)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_4_1_1_0() { return cParametersVariableDeclarationParserRuleCall_4_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_6; }

		//type=AstType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_7_0() { return cTypeAstTypeParserRuleCall_7_0; }

		//(('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ':'
		//expression=AstExpression)?
		public Group getGroup_8() { return cGroup_8; }

		//('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
		public Group getGroup_8_0() { return cGroup_8_0; }

		//'var'
		public Keyword getVarKeyword_8_0_0() { return cVarKeyword_8_0_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_0_1() { return cVariablesAssignment_8_0_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_8_0_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_8_0_1_0; }

		//(',' variables+=ValuedVariableDeclaration)*
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }

		//','
		public Keyword getCommaKeyword_8_0_2_0() { return cCommaKeyword_8_0_2_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_0_2_1() { return cVariablesAssignment_8_0_2_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_8_0_2_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_8_0_2_1_0; }

		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }

		//expression=AstExpression
		public Assignment getExpressionAssignment_8_2() { return cExpressionAssignment_8_2; }

		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_8_2_0() { return cExpressionAstExpressionParserRuleCall_8_2_0; }

		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class AstProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cVarKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cVariablesAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_6_0_1_0 = (RuleCall)cVariablesAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cVariablesAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_6_0_2_1_0 = (RuleCall)cVariablesAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cBeginKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cStatementsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_6_2_0 = (RuleCall)cStatementsAssignment_6_2.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AstProcedure:
		//	annotations+=AstAnnotation*
		//	'procedure' name=ID
		//	'(' (parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
		//	')' (('var'
		//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
		//	'begin'
		//	statements+=Statement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* 'procedure' name=ID '(' (parameters+=VariableDeclaration (','
		//parameters+=VariableDeclaration)*)? ')' (('var' variables+=ValuedVariableDeclaration (','
		//variables+=ValuedVariableDeclaration)*)? 'begin' statements+=Statement*)? 'end'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//'procedure'
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_4_0_0() { return cParametersVariableDeclarationParserRuleCall_4_0_0; }

		//(',' parameters+=VariableDeclaration)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_4_1_1_0() { return cParametersVariableDeclarationParserRuleCall_4_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? 'begin'
		//statements+=Statement*)?
		public Group getGroup_6() { return cGroup_6; }

		//('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//'var'
		public Keyword getVarKeyword_6_0_0() { return cVarKeyword_6_0_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_6_0_1() { return cVariablesAssignment_6_0_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_6_0_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_6_0_1_0; }

		//(',' variables+=ValuedVariableDeclaration)*
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }

		//','
		public Keyword getCommaKeyword_6_0_2_0() { return cCommaKeyword_6_0_2_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_6_0_2_1() { return cVariablesAssignment_6_0_2_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_6_0_2_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_6_0_2_1_0; }

		//'begin'
		public Keyword getBeginKeyword_6_1() { return cBeginKeyword_6_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6_2() { return cStatementsAssignment_6_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_2_0() { return cStatementsStatementParserRuleCall_6_2_0; }

		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class ActorParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ActorParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ActorParameter Variable:
		//	VariableDeclaration ('=' value=AstExpression)?
		@Override public ParserRule getRule() { return rule; }

		//VariableDeclaration ('=' value=AstExpression)?
		public Group getGroup() { return cGroup; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//('=' value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}

	public class StateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StateVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValuedVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StateVariable Variable:
		//	ValuedVariableDeclaration ';'
		@Override public ParserRule getRule() { return rule; }

		//ValuedVariableDeclaration ';'
		public Group getGroup() { return cGroup; }

		//ValuedVariableDeclaration
		public RuleCall getValuedVariableDeclarationParserRuleCall_0() { return cValuedVariableDeclarationParserRuleCall_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AstTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//AstTag:
		//	identifiers+=ID ('.' identifiers+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//identifiers+=ID ('.' identifiers+=ID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }

		//('.' identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}

	public class InequalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Inequality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAstTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagsAstTagParserRuleCall_1_1_0 = (RuleCall)cTagsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// priorities
		/////////////////////////////////////////////////////////////////////////////////
		//Inequality:
		//	tags+=AstTag ('>' tags+=AstTag)+ ';';
		@Override public ParserRule getRule() { return rule; }

		//tags+=AstTag ('>' tags+=AstTag)+ ';'
		public Group getGroup() { return cGroup; }

		//tags+=AstTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_0_0() { return cTagsAstTagParserRuleCall_0_0; }

		//('>' tags+=AstTag)+
		public Group getGroup_1() { return cGroup_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//tags+=AstTag
		public Assignment getTagsAssignment_1_1() { return cTagsAssignment_1_1; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_1_1_0() { return cTagsAstTagParserRuleCall_1_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPriorityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInequalitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInequalitiesInequalityParserRuleCall_2_0 = (RuleCall)cInequalitiesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Priority:
		//	{Priority}
		//	'priority'
		//	inequalities+=Inequality*
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{Priority} 'priority' inequalities+=Inequality* 'end'
		public Group getGroup() { return cGroup; }

		//{Priority}
		public Action getPriorityAction_0() { return cPriorityAction_0; }

		//'priority'
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }

		//inequalities+=Inequality*
		public Assignment getInequalitiesAssignment_2() { return cInequalitiesAssignment_2; }

		//Inequality
		public RuleCall getInequalitiesInequalityParserRuleCall_2_0() { return cInequalitiesInequalityParserRuleCall_2_0; }

		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class ScheduleFsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ScheduleFsm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInitialStateAstStateCrossReference_2_0 = (CrossReference)cInitialStateAssignment_2.eContents().get(0);
		private final RuleCall cInitialStateAstStateIDTerminalRuleCall_2_0_1 = (RuleCall)cInitialStateAstStateCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsFsmParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// schedule
		/////////////////////////////////////////////////////////////////////////////////
		//// FSM schedule
		//ScheduleFsm:
		//	'schedule' 'fsm' initialState=[AstState] ':'
		//	contents=Fsm
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//'schedule' 'fsm' initialState=[AstState] ':' contents=Fsm 'end'
		public Group getGroup() { return cGroup; }

		//'schedule'
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }

		//'fsm'
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }

		//initialState=[AstState]
		public Assignment getInitialStateAssignment_2() { return cInitialStateAssignment_2; }

		//[AstState]
		public CrossReference getInitialStateAstStateCrossReference_2_0() { return cInitialStateAstStateCrossReference_2_0; }

		//ID
		public RuleCall getInitialStateAstStateIDTerminalRuleCall_2_0_1() { return cInitialStateAstStateIDTerminalRuleCall_2_0_1; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//contents=Fsm
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }

		//Fsm
		public RuleCall getContentsFsmParserRuleCall_4_0() { return cContentsFsmParserRuleCall_4_0; }

		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class FsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Fsm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFsmAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTransitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransitionsAstTransitionParserRuleCall_1_0 = (RuleCall)cTransitionsAssignment_1.eContents().get(0);
		
		//Fsm:
		//	{Fsm} transitions+=AstTransition*;
		@Override public ParserRule getRule() { return rule; }

		//{Fsm} transitions+=AstTransition*
		public Group getGroup() { return cGroup; }

		//{Fsm}
		public Action getFsmAction_0() { return cFsmAction_0; }

		//transitions+=AstTransition*
		public Assignment getTransitionsAssignment_1() { return cTransitionsAssignment_1; }

		//AstTransition
		public RuleCall getTransitionsAstTransitionParserRuleCall_1_0() { return cTransitionsAstTransitionParserRuleCall_1_0; }
	}

	public class AstTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceAstStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceAstStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceAstStateCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagAstTagParserRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final CrossReference cTargetAstStateCrossReference_5_0_0 = (CrossReference)cTargetAssignment_5_0.eContents().get(0);
		private final RuleCall cTargetAstStateIDTerminalRuleCall_5_0_0_1 = (RuleCall)cTargetAstStateCrossReference_5_0_0.eContents().get(1);
		private final Assignment cExternalTargetAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cExternalTargetExternalTargetParserRuleCall_5_1_0 = (RuleCall)cExternalTargetAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstTransition:
		//	source=[AstState] '(' tag=AstTag ')' '-->' (target=[AstState] | externalTarget=ExternalTarget) ';';
		@Override public ParserRule getRule() { return rule; }

		//source=[AstState] '(' tag=AstTag ')' '-->' (target=[AstState] | externalTarget=ExternalTarget) ';'
		public Group getGroup() { return cGroup; }

		//source=[AstState]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[AstState]
		public CrossReference getSourceAstStateCrossReference_0_0() { return cSourceAstStateCrossReference_0_0; }

		//ID
		public RuleCall getSourceAstStateIDTerminalRuleCall_0_0_1() { return cSourceAstStateIDTerminalRuleCall_0_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//tag=AstTag
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0() { return cTagAstTagParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_4; }

		//(target=[AstState] | externalTarget=ExternalTarget)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//target=[AstState]
		public Assignment getTargetAssignment_5_0() { return cTargetAssignment_5_0; }

		//[AstState]
		public CrossReference getTargetAstStateCrossReference_5_0_0() { return cTargetAstStateCrossReference_5_0_0; }

		//ID
		public RuleCall getTargetAstStateIDTerminalRuleCall_5_0_0_1() { return cTargetAstStateIDTerminalRuleCall_5_0_0_1; }

		//externalTarget=ExternalTarget
		public Assignment getExternalTargetAssignment_5_1() { return cExternalTargetAssignment_5_1; }

		//ExternalTarget
		public RuleCall getExternalTargetExternalTargetParserRuleCall_5_1_0() { return cExternalTargetExternalTargetParserRuleCall_5_1_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExternalTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExternalTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFsmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFsmLocalFsmCrossReference_0_0 = (CrossReference)cFsmAssignment_0.eContents().get(0);
		private final RuleCall cFsmLocalFsmIDTerminalRuleCall_0_0_1 = (RuleCall)cFsmLocalFsmCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateAstStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateAstStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateAstStateCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromAstStateCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromAstStateIDTerminalRuleCall_4_0_1 = (RuleCall)cFromAstStateCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToAstStateCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToAstStateIDTerminalRuleCall_6_0_1 = (RuleCall)cToAstStateCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternalTarget:
		//	fsm=[LocalFsm] '.' state=[AstState] '(' from=[AstState] '=>' to=[AstState] ')';
		@Override public ParserRule getRule() { return rule; }

		//fsm=[LocalFsm] '.' state=[AstState] '(' from=[AstState] '=>' to=[AstState] ')'
		public Group getGroup() { return cGroup; }

		//fsm=[LocalFsm]
		public Assignment getFsmAssignment_0() { return cFsmAssignment_0; }

		//[LocalFsm]
		public CrossReference getFsmLocalFsmCrossReference_0_0() { return cFsmLocalFsmCrossReference_0_0; }

		//ID
		public RuleCall getFsmLocalFsmIDTerminalRuleCall_0_0_1() { return cFsmLocalFsmIDTerminalRuleCall_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//state=[AstState]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[AstState]
		public CrossReference getStateAstStateCrossReference_2_0() { return cStateAstStateCrossReference_2_0; }

		//ID
		public RuleCall getStateAstStateIDTerminalRuleCall_2_0_1() { return cStateAstStateIDTerminalRuleCall_2_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//from=[AstState]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }

		//[AstState]
		public CrossReference getFromAstStateCrossReference_4_0() { return cFromAstStateCrossReference_4_0; }

		//ID
		public RuleCall getFromAstStateIDTerminalRuleCall_4_0_1() { return cFromAstStateIDTerminalRuleCall_4_0_1; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }

		//to=[AstState]
		public Assignment getToAssignment_6() { return cToAssignment_6; }

		//[AstState]
		public CrossReference getToAstStateCrossReference_6_0() { return cToAstStateCrossReference_6_0; }

		//ID
		public RuleCall getToAstStateIDTerminalRuleCall_6_0_1() { return cToAstStateIDTerminalRuleCall_6_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AstStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AstState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ScheduleRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ScheduleRegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRegexpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRegExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// regular expression schedule
		//ScheduleRegExp RegExp:
		//	'schedule' 'regexp' exp=RegExp 'end'
		@Override public ParserRule getRule() { return rule; }

		//'schedule' 'regexp' exp=RegExp 'end'
		public Group getGroup() { return cGroup; }

		//'schedule'
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }

		//'regexp'
		public Keyword getRegexpKeyword_1() { return cRegexpKeyword_1; }

		//exp=RegExp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//RegExp
		public RuleCall getExpRegExpParserRuleCall_2_0() { return cExpRegExpParserRuleCall_2_0; }

		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class RegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.RegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpConcatenationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRegExpConcatenationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RegExp:
		//	RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*;
		@Override public ParserRule getRule() { return rule; }

		//RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*
		public Group getGroup() { return cGroup; }

		//RegExpConcatenation
		public RuleCall getRegExpConcatenationParserRuleCall_0() { return cRegExpConcatenationParserRuleCall_0; }

		//({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*
		public Group getGroup_1() { return cGroup_1; }

		//{RegExpBinary.left=current}
		public Action getRegExpBinaryLeftAction_1_0() { return cRegExpBinaryLeftAction_1_0; }

		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }

		//right=RegExpConcatenation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RegExpConcatenation
		public RuleCall getRightRegExpConcatenationParserRuleCall_1_2_0() { return cRightRegExpConcatenationParserRuleCall_1_2_0; }
	}

	public class RegExpConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.RegExpConcatenation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpPostfixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRegExpPostfixParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RegExpConcatenation RegExp:
		//	RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*
		@Override public ParserRule getRule() { return rule; }

		//RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*
		public Group getGroup() { return cGroup; }

		//RegExpPostfix
		public RuleCall getRegExpPostfixParserRuleCall_0() { return cRegExpPostfixParserRuleCall_0; }

		//({RegExpBinary.left=current} right=RegExpPostfix)*
		public Group getGroup_1() { return cGroup_1; }

		//{RegExpBinary.left=current}
		public Action getRegExpBinaryLeftAction_1_0() { return cRegExpBinaryLeftAction_1_0; }

		//right=RegExpPostfix
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RegExpPostfix
		public RuleCall getRightRegExpPostfixParserRuleCall_1_1_0() { return cRightRegExpPostfixParserRuleCall_1_1_0; }
	}

	public class RegExpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.RegExpPostfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpGroupingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpUnaryChildAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cUnaryOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cUnaryOperatorAlternatives_1_1_0 = (Alternatives)cUnaryOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cUnaryOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cUnaryOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cUnaryOperatorQuestionMarkKeyword_1_1_0_1 = (Keyword)cUnaryOperatorAlternatives_1_1_0.eContents().get(1);
		
		//RegExpPostfix RegExp:
		//	RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
		@Override public ParserRule getRule() { return rule; }

		//RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
		public Group getGroup() { return cGroup; }

		//RegExpGrouping
		public RuleCall getRegExpGroupingParserRuleCall_0() { return cRegExpGroupingParserRuleCall_0; }

		//({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
		public Group getGroup_1() { return cGroup_1; }

		//{RegExpUnary.child=current}
		public Action getRegExpUnaryChildAction_1_0() { return cRegExpUnaryChildAction_1_0; }

		//unaryOperator=('*' | '?')
		public Assignment getUnaryOperatorAssignment_1_1() { return cUnaryOperatorAssignment_1_1; }

		//('*' | '?')
		public Alternatives getUnaryOperatorAlternatives_1_1_0() { return cUnaryOperatorAlternatives_1_1_0; }

		//'*'
		public Keyword getUnaryOperatorAsteriskKeyword_1_1_0_0() { return cUnaryOperatorAsteriskKeyword_1_1_0_0; }

		//'?'
		public Keyword getUnaryOperatorQuestionMarkKeyword_1_1_0_1() { return cUnaryOperatorQuestionMarkKeyword_1_1_0_1; }
	}

	public class RegExpGroupingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.RegExpGrouping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegExpTerminalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRegExpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RegExpGrouping RegExp:
		//	RegExpTerminal
		//	| '(' RegExp ')'
		@Override public ParserRule getRule() { return rule; }

		//RegExpTerminal | '(' RegExp ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegExpTerminal
		public RuleCall getRegExpTerminalParserRuleCall_0() { return cRegExpTerminalParserRuleCall_0; }

		//'(' RegExp ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//RegExp
		public RuleCall getRegExpParserRuleCall_1_1() { return cRegExpParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class RegExpTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.RegExpTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegExpTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagAstTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//RegExpTerminal RegExp:
		//	{RegExpTag} tag=AstTag
		@Override public ParserRule getRule() { return rule; }

		//{RegExpTag} tag=AstTag
		public Group getGroup() { return cGroup; }

		//{RegExpTag}
		public Action getRegExpTagAction_0() { return cRegExpTagAction_0; }

		//tag=AstTag
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_1_0() { return cTagAstTagParserRuleCall_1_0; }
	}

	public class LocalFsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.LocalFsm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsFsmParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// local FSM
		//LocalFsm:
		//	'local' 'fsm' name=ID ':'
		//	contents=Fsm
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//'local' 'fsm' name=ID ':' contents=Fsm 'end'
		public Group getGroup() { return cGroup; }

		//'local'
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }

		//'fsm'
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//contents=Fsm
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }

		//Fsm
		public RuleCall getContentsFsmParserRuleCall_4_0() { return cContentsFsmParserRuleCall_4_0; }

		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cActionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInputsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInputsInputPatternParserRuleCall_4_0_0 = (RuleCall)cInputsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInputsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInputsInputPatternParserRuleCall_4_1_1_0 = (RuleCall)cInputsAssignment_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsOutputPatternParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOutputsOutputPatternParserRuleCall_6_1_1_0 = (RuleCall)cOutputsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGuardKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_7_1_0 = (RuleCall)cGuardAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVarKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariablesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_8_1_0 = (RuleCall)cVariablesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cVariablesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_8_2_1_0 = (RuleCall)cVariablesAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDoKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cStatementsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_9_1_0 = (RuleCall)cStatementsAssignment_9_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// actions
		/////////////////////////////////////////////////////////////////////////////////
		//AstAction:
		//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
		//	'action' (inputs+=InputPattern (',' inputs+=InputPattern)*)?
		//	'==>' (outputs+=OutputPattern (',' outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var'
		//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ('do'
		//	statements+=Statement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')? 'action' (inputs+=InputPattern (',' inputs+=InputPattern)*)?
		//'==>' (outputs+=OutputPattern (',' outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var'
		//variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ('do' statements+=Statement*)? 'end'
		public Group getGroup() { return cGroup; }

		//{AstAction}
		public Action getAstActionAction_0() { return cAstActionAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//(tag=AstTag ':')?
		public Group getGroup_2() { return cGroup_2; }

		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }

		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//'action'
		public Keyword getActionKeyword_3() { return cActionKeyword_3; }

		//(inputs+=InputPattern (',' inputs+=InputPattern)*)?
		public Group getGroup_4() { return cGroup_4; }

		//inputs+=InputPattern
		public Assignment getInputsAssignment_4_0() { return cInputsAssignment_4_0; }

		//InputPattern
		public RuleCall getInputsInputPatternParserRuleCall_4_0_0() { return cInputsInputPatternParserRuleCall_4_0_0; }

		//(',' inputs+=InputPattern)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//inputs+=InputPattern
		public Assignment getInputsAssignment_4_1_1() { return cInputsAssignment_4_1_1; }

		//InputPattern
		public RuleCall getInputsInputPatternParserRuleCall_4_1_1_0() { return cInputsInputPatternParserRuleCall_4_1_1_0; }

		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5; }

		//(outputs+=OutputPattern (',' outputs+=OutputPattern)*)?
		public Group getGroup_6() { return cGroup_6; }

		//outputs+=OutputPattern
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }

		//OutputPattern
		public RuleCall getOutputsOutputPatternParserRuleCall_6_0_0() { return cOutputsOutputPatternParserRuleCall_6_0_0; }

		//(',' outputs+=OutputPattern)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//outputs+=OutputPattern
		public Assignment getOutputsAssignment_6_1_1() { return cOutputsAssignment_6_1_1; }

		//OutputPattern
		public RuleCall getOutputsOutputPatternParserRuleCall_6_1_1_0() { return cOutputsOutputPatternParserRuleCall_6_1_1_0; }

		//('guard' guard=Guard)?
		public Group getGroup_7() { return cGroup_7; }

		//'guard'
		public Keyword getGuardKeyword_7_0() { return cGuardKeyword_7_0; }

		//guard=Guard
		public Assignment getGuardAssignment_7_1() { return cGuardAssignment_7_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_7_1_0() { return cGuardGuardParserRuleCall_7_1_0; }

		//('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
		public Group getGroup_8() { return cGroup_8; }

		//'var'
		public Keyword getVarKeyword_8_0() { return cVarKeyword_8_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_1() { return cVariablesAssignment_8_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_8_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_8_1_0; }

		//(',' variables+=ValuedVariableDeclaration)*
		public Group getGroup_8_2() { return cGroup_8_2; }

		//','
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_2_1() { return cVariablesAssignment_8_2_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_8_2_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_8_2_1_0; }

		//('do' statements+=Statement*)?
		public Group getGroup_9() { return cGroup_9; }

		//'do'
		public Keyword getDoKeyword_9_0() { return cDoKeyword_9_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_9_1() { return cStatementsAssignment_9_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_1_0() { return cStatementsStatementParserRuleCall_9_1_0; }

		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}

	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cInitializeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOutputsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOutputsOutputPatternParserRuleCall_5_0_0 = (RuleCall)cOutputsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOutputsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOutputsOutputPatternParserRuleCall_5_1_1_0 = (RuleCall)cOutputsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_6_1_0 = (RuleCall)cGuardAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cVariablesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cVariablesValuedVariableDeclarationParserRuleCall_7_2_1_0 = (RuleCall)cVariablesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_8_1_0 = (RuleCall)cStatementsAssignment_8_1.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Initialize AstAction:
		//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
		//	'initialize'
		//	'==>' (outputs+=OutputPattern (',' outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var'
		//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ('do'
		//	statements+=Statement*)?
		//	'end'
		@Override public ParserRule getRule() { return rule; }

		//{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')? 'initialize' '==>' (outputs+=OutputPattern (','
		//outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var' variables+=ValuedVariableDeclaration (','
		//variables+=ValuedVariableDeclaration)*)? ('do' statements+=Statement*)? 'end'
		public Group getGroup() { return cGroup; }

		//{AstAction}
		public Action getAstActionAction_0() { return cAstActionAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//(tag=AstTag ':')?
		public Group getGroup_2() { return cGroup_2; }

		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }

		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//'initialize'
		public Keyword getInitializeKeyword_3() { return cInitializeKeyword_3; }

		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignEqualsSignGreaterThanSignKeyword_4; }

		//(outputs+=OutputPattern (',' outputs+=OutputPattern)*)?
		public Group getGroup_5() { return cGroup_5; }

		//outputs+=OutputPattern
		public Assignment getOutputsAssignment_5_0() { return cOutputsAssignment_5_0; }

		//OutputPattern
		public RuleCall getOutputsOutputPatternParserRuleCall_5_0_0() { return cOutputsOutputPatternParserRuleCall_5_0_0; }

		//(',' outputs+=OutputPattern)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//outputs+=OutputPattern
		public Assignment getOutputsAssignment_5_1_1() { return cOutputsAssignment_5_1_1; }

		//OutputPattern
		public RuleCall getOutputsOutputPatternParserRuleCall_5_1_1_0() { return cOutputsOutputPatternParserRuleCall_5_1_1_0; }

		//('guard' guard=Guard)?
		public Group getGroup_6() { return cGroup_6; }

		//'guard'
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }

		//guard=Guard
		public Assignment getGuardAssignment_6_1() { return cGuardAssignment_6_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_6_1_0() { return cGuardGuardParserRuleCall_6_1_0; }

		//('var' variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
		public Group getGroup_7() { return cGroup_7; }

		//'var'
		public Keyword getVarKeyword_7_0() { return cVarKeyword_7_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_7_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_7_1_0; }

		//(',' variables+=ValuedVariableDeclaration)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//variables+=ValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_2_1() { return cVariablesAssignment_7_2_1; }

		//ValuedVariableDeclaration
		public RuleCall getVariablesValuedVariableDeclarationParserRuleCall_7_2_1_0() { return cVariablesValuedVariableDeclarationParserRuleCall_7_2_1_0; }

		//('do' statements+=Statement*)?
		public Group getGroup_8() { return cGroup_8; }

		//'do'
		public Keyword getDoKeyword_8_0() { return cDoKeyword_8_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_8_1() { return cStatementsAssignment_8_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_1_0() { return cStatementsStatementParserRuleCall_8_1_0; }

		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Token");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Token Variable:
		//	name=ID
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class InputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.InputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTokensAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTokensTokenParserRuleCall_3_0 = (RuleCall)cTokensAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTokensAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTokensTokenParserRuleCall_4_1_0 = (RuleCall)cTokensAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRepeatAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_6_1_0 = (RuleCall)cRepeatAssignment_6_1.eContents().get(0);
		
		//InputPattern:
		//	port=[AstPort] ':' '[' tokens+=Token (',' tokens+=Token)* ']' ('repeat' repeat=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//port=[AstPort] ':' '[' tokens+=Token (',' tokens+=Token)* ']' ('repeat' repeat=AstExpression)?
		public Group getGroup() { return cGroup; }

		//port=[AstPort]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }

		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0() { return cPortAstPortCrossReference_0_0; }

		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_1; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//tokens+=Token
		public Assignment getTokensAssignment_3() { return cTokensAssignment_3; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_3_0() { return cTokensTokenParserRuleCall_3_0; }

		//(',' tokens+=Token)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//tokens+=Token
		public Assignment getTokensAssignment_4_1() { return cTokensAssignment_4_1; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_4_1_0() { return cTokensTokenParserRuleCall_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//('repeat' repeat=AstExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//'repeat'
		public Keyword getRepeatKeyword_6_0() { return cRepeatKeyword_6_0; }

		//repeat=AstExpression
		public Assignment getRepeatAssignment_6_1() { return cRepeatAssignment_6_1; }

		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_6_1_0() { return cRepeatAstExpressionParserRuleCall_6_1_0; }
	}

	public class OutputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.OutputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesAstExpressionParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesAstExpressionParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRepeatAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_6_1_0 = (RuleCall)cRepeatAssignment_6_1.eContents().get(0);
		
		//OutputPattern:
		//	port=[AstPort] ':' '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//port=[AstPort] ':' '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?
		public Group getGroup() { return cGroup; }

		//port=[AstPort]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }

		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0() { return cPortAstPortCrossReference_0_0; }

		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_1; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//values+=AstExpression
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_3_0() { return cValuesAstExpressionParserRuleCall_3_0; }

		//(',' values+=AstExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//values+=AstExpression
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_4_1_0() { return cValuesAstExpressionParserRuleCall_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//('repeat' repeat=AstExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//'repeat'
		public Keyword getRepeatKeyword_6_0() { return cRepeatKeyword_6_0; }

		//repeat=AstExpression
		public Assignment getRepeatAssignment_6_1() { return cRepeatAssignment_6_1; }

		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_6_1_0() { return cRepeatAstExpressionParserRuleCall_6_1_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		
		//Guard:
		//	{Guard} expressions+=AstExpression (',' expressions+=AstExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//{Guard} expressions+=AstExpression (',' expressions+=AstExpression)*
		public Group getGroup() { return cGroup; }

		//{Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_1_0() { return cExpressionsAstExpressionParserRuleCall_1_0; }

		//(',' expressions+=AstExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_2_1_0() { return cExpressionsAstExpressionParserRuleCall_2_1_0; }
	}

	public class StatementAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetVariableReferenceParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_2_1_0 = (RuleCall)cIndexesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueAstExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// statements
		/////////////////////////////////////////////////////////////////////////////////
		//StatementAssign:
		//	annotations+=AstAnnotation*
		//	target=VariableReference ('[' indexes+=AstExpression ']')* ':=' value=AstExpression ';';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* target=VariableReference ('[' indexes+=AstExpression ']')* ':=' value=AstExpression ';'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//target=VariableReference
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//VariableReference
		public RuleCall getTargetVariableReferenceParserRuleCall_1_0() { return cTargetVariableReferenceParserRuleCall_1_0; }

		//('[' indexes+=AstExpression ']')*
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//indexes+=AstExpression
		public Assignment getIndexesAssignment_2_1() { return cIndexesAssignment_2_1; }

		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_2_1_0() { return cIndexesAstExpressionParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//':='
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//value=AstExpression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_4_0() { return cValueAstExpressionParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class StatementCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cProcedureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcedureAstProcedureCrossReference_1_0 = (CrossReference)cProcedureAssignment_1.eContents().get(0);
		private final RuleCall cProcedureAstProcedureQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cProcedureAstProcedureCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsAstExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsAstExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StatementCall:
		//	annotations+=AstAnnotation*
		//	procedure=[AstProcedure|QualifiedName]
		//	'(' (arguments+=AstExpression (',' arguments+=AstExpression)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* procedure=[AstProcedure|QualifiedName] '(' (arguments+=AstExpression (','
		//arguments+=AstExpression)*)? ')' ';'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//procedure=[AstProcedure|QualifiedName]
		public Assignment getProcedureAssignment_1() { return cProcedureAssignment_1; }

		//[AstProcedure|QualifiedName]
		public CrossReference getProcedureAstProcedureCrossReference_1_0() { return cProcedureAstProcedureCrossReference_1_0; }

		//QualifiedName
		public RuleCall getProcedureAstProcedureQualifiedNameParserRuleCall_1_0_1() { return cProcedureAstProcedureQualifiedNameParserRuleCall_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=AstExpression (',' arguments+=AstExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=AstExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//AstExpression
		public RuleCall getArgumentsAstExpressionParserRuleCall_3_0_0() { return cArgumentsAstExpressionParserRuleCall_3_0_0; }

		//(',' arguments+=AstExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=AstExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//AstExpression
		public RuleCall getArgumentsAstExpressionParserRuleCall_3_1_1_0() { return cArgumentsAstExpressionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class StatementForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementForeach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cForeachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerAstExpressionParserRuleCall_4_0 = (RuleCall)cLowerAssignment_4.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHigherAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHigherAstExpressionParserRuleCall_6_0 = (RuleCall)cHigherAssignment_6.eContents().get(0);
		private final Keyword cDoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//StatementForeach:
		//	annotations+=AstAnnotation*
		//	'foreach' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression
		//	'do'
		//	statements+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* 'foreach' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression
		//'do' statements+=Statement* 'end'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//'foreach'
		public Keyword getForeachKeyword_1() { return cForeachKeyword_1; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_2_0() { return cVariableVariableDeclarationParserRuleCall_2_0; }

		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//lower=AstExpression
		public Assignment getLowerAssignment_4() { return cLowerAssignment_4; }

		//AstExpression
		public RuleCall getLowerAstExpressionParserRuleCall_4_0() { return cLowerAstExpressionParserRuleCall_4_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_5() { return cFullStopFullStopKeyword_5; }

		//higher=AstExpression
		public Assignment getHigherAssignment_6() { return cHigherAssignment_6; }

		//AstExpression
		public RuleCall getHigherAstExpressionParserRuleCall_6_0() { return cHigherAstExpressionParserRuleCall_6_0; }

		//'do'
		public Keyword getDoKeyword_7() { return cDoKeyword_7; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }

		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class StatementIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionAstExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Assignment cElsifsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElsifsStatementElsifParserRuleCall_5_0 = (RuleCall)cElsifsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StatementIf:
		//	annotations+=AstAnnotation*
		//	'if' condition=AstExpression 'then'
		//	then+=Statement*
		//	elsifs+=StatementElsif* ('else' else+=Statement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* 'if' condition=AstExpression 'then' then+=Statement* elsifs+=StatementElsif* ('else'
		//else+=Statement*)? 'end'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//condition=AstExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_2_0() { return cConditionAstExpressionParserRuleCall_2_0; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//then+=Statement*
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }

		//elsifs+=StatementElsif*
		public Assignment getElsifsAssignment_5() { return cElsifsAssignment_5; }

		//StatementElsif
		public RuleCall getElsifsStatementElsifParserRuleCall_5_0() { return cElsifsStatementElsifParserRuleCall_5_0; }

		//('else' else+=Statement*)?
		public Group getGroup_6() { return cGroup_6; }

		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else+=Statement*
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_6_1_0() { return cElseStatementParserRuleCall_6_1_0; }

		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class StatementElsifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementElsif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//StatementElsif:
		//	'elsif' condition=AstExpression 'then'
		//	then+=Statement*;
		@Override public ParserRule getRule() { return rule; }

		//'elsif' condition=AstExpression 'then' then+=Statement*
		public Group getGroup() { return cGroup; }

		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then+=Statement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_3_0() { return cThenStatementParserRuleCall_3_0; }
	}

	public class StatementWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.StatementWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionAstExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StatementWhile:
		//	annotations+=AstAnnotation*
		//	'while' condition=AstExpression 'do'
		//	statements+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* 'while' condition=AstExpression 'do' statements+=Statement* 'end'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//condition=AstExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_2_0() { return cConditionAstExpressionParserRuleCall_2_0; }

		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatementForeachParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatementIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStatementWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	StatementAssign
		//	| StatementCall
		//	| StatementForeach
		//	| StatementIf
		//	| StatementWhile;
		@Override public ParserRule getRule() { return rule; }

		//StatementAssign | StatementCall | StatementForeach | StatementIf | StatementWhile
		public Alternatives getAlternatives() { return cAlternatives; }

		//StatementAssign
		public RuleCall getStatementAssignParserRuleCall_0() { return cStatementAssignParserRuleCall_0; }

		//StatementCall
		public RuleCall getStatementCallParserRuleCall_1() { return cStatementCallParserRuleCall_1; }

		//StatementForeach
		public RuleCall getStatementForeachParserRuleCall_2() { return cStatementForeachParserRuleCall_2; }

		//StatementIf
		public RuleCall getStatementIfParserRuleCall_3() { return cStatementIfParserRuleCall_3; }

		//StatementWhile
		public RuleCall getStatementWhileParserRuleCall_4() { return cStatementWhileParserRuleCall_4; }
	}

	public class AstExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// expressions
		/////////////////////////////////////////////////////////////////////////////////
		//AstExpression:
		//	ExpressionAnd ({ExpressionBinary.left=current} operator=('||' | 'or') right=ExpressionAnd)*;
		@Override public ParserRule getRule() { return rule; }

		//ExpressionAnd ({ExpressionBinary.left=current} operator=('||' | 'or') right=ExpressionAnd)*
		public Group getGroup() { return cGroup; }

		//ExpressionAnd
		public RuleCall getExpressionAndParserRuleCall_0() { return cExpressionAndParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('||' | 'or') right=ExpressionAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('||' | 'or')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('||' | 'or')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0_0; }

		//'or'
		public Keyword getOperatorOrKeyword_1_1_0_1() { return cOperatorOrKeyword_1_1_0_1; }

		//right=ExpressionAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionAnd
		public RuleCall getRightExpressionAndParserRuleCall_1_2_0() { return cRightExpressionAndParserRuleCall_1_2_0; }
	}

	public class ExpressionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionBitorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionBitorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionAnd AstExpression:
		//	ExpressionBitor ({ExpressionBinary.left=current} operator=('&&' | 'and') right=ExpressionBitor)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionBitor ({ExpressionBinary.left=current} operator=('&&' | 'and') right=ExpressionBitor)*
		public Group getGroup() { return cGroup; }

		//ExpressionBitor
		public RuleCall getExpressionBitorParserRuleCall_0() { return cExpressionBitorParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('&&' | 'and') right=ExpressionBitor)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('&&' | 'and')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('&&' | 'and')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0_0; }

		//'and'
		public Keyword getOperatorAndKeyword_1_1_0_1() { return cOperatorAndKeyword_1_1_0_1; }

		//right=ExpressionBitor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionBitor
		public RuleCall getRightExpressionBitorParserRuleCall_1_2_0() { return cRightExpressionBitorParserRuleCall_1_2_0; }
	}

	public class ExpressionBitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionBitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionBitxorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionBitxorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionBitor AstExpression:
		//	ExpressionBitxor ({ExpressionBinary.left=current} operator='|' right=ExpressionBitxor)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionBitxor ({ExpressionBinary.left=current} operator='|' right=ExpressionBitxor)*
		public Group getGroup() { return cGroup; }

		//ExpressionBitxor
		public RuleCall getExpressionBitxorParserRuleCall_0() { return cExpressionBitxorParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator='|' right=ExpressionBitxor)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }

		//right=ExpressionBitxor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionBitxor
		public RuleCall getRightExpressionBitxorParserRuleCall_1_2_0() { return cRightExpressionBitxorParserRuleCall_1_2_0; }
	}

	public class ExpressionBitxorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionBitxor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionBitandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionBitandParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionBitxor AstExpression:
		//	ExpressionBitand ({ExpressionBinary.left=current} operator='^' right=ExpressionBitand)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionBitand ({ExpressionBinary.left=current} operator='^' right=ExpressionBitand)*
		public Group getGroup() { return cGroup; }

		//ExpressionBitand
		public RuleCall getExpressionBitandParserRuleCall_0() { return cExpressionBitandParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator='^' right=ExpressionBitand)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }

		//right=ExpressionBitand
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionBitand
		public RuleCall getRightExpressionBitandParserRuleCall_1_2_0() { return cRightExpressionBitandParserRuleCall_1_2_0; }
	}

	public class ExpressionBitandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionBitand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionEqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionEqParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionBitand AstExpression:
		//	ExpressionEq ({ExpressionBinary.left=current} operator='&' right=ExpressionEq)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionEq ({ExpressionBinary.left=current} operator='&' right=ExpressionEq)*
		public Group getGroup() { return cGroup; }

		//ExpressionEq
		public RuleCall getExpressionEqParserRuleCall_0() { return cExpressionEqParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator='&' right=ExpressionEq)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator='&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0() { return cOperatorAmpersandKeyword_1_1_0; }

		//right=ExpressionEq
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionEq
		public RuleCall getRightExpressionEqParserRuleCall_1_2_0() { return cRightExpressionEqParserRuleCall_1_2_0; }
	}

	public class ExpressionEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionRelationalParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionEq AstExpression:
		//	ExpressionRelational ({ExpressionBinary.left=current} operator=('=' | '!=') right=ExpressionRelational)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionRelational ({ExpressionBinary.left=current} operator=('=' | '!=') right=ExpressionRelational)*
		public Group getGroup() { return cGroup; }

		//ExpressionRelational
		public RuleCall getExpressionRelationalParserRuleCall_0() { return cExpressionRelationalParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('=' | '!=') right=ExpressionRelational)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('=' | '!=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('=' | '!=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }

		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=ExpressionRelational
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionRelational
		public RuleCall getRightExpressionRelationalParserRuleCall_1_2_0() { return cRightExpressionRelationalParserRuleCall_1_2_0; }
	}

	public class ExpressionRelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionRelational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionRelational AstExpression:
		//	ExpressionShift ({ExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=ExpressionShift)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionShift ({ExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=ExpressionShift)*
		public Group getGroup() { return cGroup; }

		//ExpressionShift
		public RuleCall getExpressionShiftParserRuleCall_0() { return cExpressionShiftParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=ExpressionShift)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('<' | '<=' | '>' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('<' | '<=' | '>' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }

		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }

		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignKeyword_1_1_0_2; }

		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//right=ExpressionShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionShift
		public RuleCall getRightExpressionShiftParserRuleCall_1_2_0() { return cRightExpressionShiftParserRuleCall_1_2_0; }
	}

	public class ExpressionShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionShift AstExpression:
		//	ExpressionAdditive ({ExpressionBinary.left=current} operator=('<<' | '>>') right=ExpressionAdditive)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionAdditive ({ExpressionBinary.left=current} operator=('<<' | '>>') right=ExpressionAdditive)*
		public Group getGroup() { return cGroup; }

		//ExpressionAdditive
		public RuleCall getExpressionAdditiveParserRuleCall_0() { return cExpressionAdditiveParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('<<' | '>>') right=ExpressionAdditive)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('<<' | '>>')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('<<' | '>>')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'<<'
		public Keyword getOperatorLessThanSignLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignLessThanSignKeyword_1_1_0_0; }

		//'>>'
		public Keyword getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//right=ExpressionAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionAdditive
		public RuleCall getRightExpressionAdditiveParserRuleCall_1_2_0() { return cRightExpressionAdditiveParserRuleCall_1_2_0; }
	}

	public class ExpressionAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionMultiplicativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionMultiplicativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionAdditive AstExpression:
		//	ExpressionMultiplicative ({ExpressionBinary.left=current} operator=('+' | '-') right=ExpressionMultiplicative)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionMultiplicative ({ExpressionBinary.left=current} operator=('+' | '-') right=ExpressionMultiplicative)*
		public Group getGroup() { return cGroup; }

		//ExpressionMultiplicative
		public RuleCall getExpressionMultiplicativeParserRuleCall_0() { return cExpressionMultiplicativeParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('+' | '-') right=ExpressionMultiplicative)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//right=ExpressionMultiplicative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionMultiplicative
		public RuleCall getRightExpressionMultiplicativeParserRuleCall_1_2_0() { return cRightExpressionMultiplicativeParserRuleCall_1_2_0; }
	}

	public class ExpressionMultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionMultiplicative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorDivKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorModKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionMultiplicative AstExpression:
		//	ExpressionExp ({ExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=ExpressionExp)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionExp ({ExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=ExpressionExp)*
		public Group getGroup() { return cGroup; }

		//ExpressionExp
		public RuleCall getExpressionExpParserRuleCall_0() { return cExpressionExpParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=ExpressionExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator=('*' | '/' | 'div' | 'mod')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('*' | '/' | 'div' | 'mod')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//'div'
		public Keyword getOperatorDivKeyword_1_1_0_2() { return cOperatorDivKeyword_1_1_0_2; }

		//'mod'
		public Keyword getOperatorModKeyword_1_1_0_3() { return cOperatorModKeyword_1_1_0_3; }

		//right=ExpressionExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionExp
		public RuleCall getRightExpressionExpParserRuleCall_1_2_0() { return cRightExpressionExpParserRuleCall_1_2_0; }
	}

	public class ExpressionExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionExp AstExpression:
		//	ExpressionUnary ({ExpressionBinary.left=current} operator='**' right=ExpressionUnary)*
		@Override public ParserRule getRule() { return rule; }

		//ExpressionUnary ({ExpressionBinary.left=current} operator='**' right=ExpressionUnary)*
		public Group getGroup() { return cGroup; }

		//ExpressionUnary
		public RuleCall getExpressionUnaryParserRuleCall_0() { return cExpressionUnaryParserRuleCall_0; }

		//({ExpressionBinary.left=current} operator='**' right=ExpressionUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinary.left=current}
		public Action getExpressionBinaryLeftAction_1_0() { return cExpressionBinaryLeftAction_1_0; }

		//operator='**'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'**'
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_0() { return cOperatorAsteriskAsteriskKeyword_1_1_0; }

		//right=ExpressionUnary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExpressionUnary
		public RuleCall getRightExpressionUnaryParserRuleCall_1_2_0() { return cRightExpressionUnaryParserRuleCall_1_2_0; }
	}

	public class ExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionUnaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cUnaryOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cUnaryOperatorAlternatives_0_1_0 = (Alternatives)cUnaryOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cUnaryOperatorTildeKeyword_0_1_0_0 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cUnaryOperatorNotKeyword_0_1_0_1 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cUnaryOperatorHyphenMinusKeyword_0_1_0_2 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(2);
		private final Keyword cUnaryOperatorNumberSignKeyword_0_1_0_3 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionPostfixParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cExpressionPostfixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionUnary AstExpression:
		//	{ExpressionUnary} unaryOperator=('~' | 'not' | '-' | '#') expression=ExpressionPostfix
		//	| ExpressionPostfix
		@Override public ParserRule getRule() { return rule; }

		//{ExpressionUnary} unaryOperator=('~' | 'not' | '-' | '#') expression=ExpressionPostfix | ExpressionPostfix
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExpressionUnary} unaryOperator=('~' | 'not' | '-' | '#') expression=ExpressionPostfix
		public Group getGroup_0() { return cGroup_0; }

		//{ExpressionUnary}
		public Action getExpressionUnaryAction_0_0() { return cExpressionUnaryAction_0_0; }

		//unaryOperator=('~' | 'not' | '-' | '#')
		public Assignment getUnaryOperatorAssignment_0_1() { return cUnaryOperatorAssignment_0_1; }

		//('~' | 'not' | '-' | '#')
		public Alternatives getUnaryOperatorAlternatives_0_1_0() { return cUnaryOperatorAlternatives_0_1_0; }

		//'~'
		public Keyword getUnaryOperatorTildeKeyword_0_1_0_0() { return cUnaryOperatorTildeKeyword_0_1_0_0; }

		//'not'
		public Keyword getUnaryOperatorNotKeyword_0_1_0_1() { return cUnaryOperatorNotKeyword_0_1_0_1; }

		//'-'
		public Keyword getUnaryOperatorHyphenMinusKeyword_0_1_0_2() { return cUnaryOperatorHyphenMinusKeyword_0_1_0_2; }

		//'#'
		public Keyword getUnaryOperatorNumberSignKeyword_0_1_0_3() { return cUnaryOperatorNumberSignKeyword_0_1_0_3; }

		//expression=ExpressionPostfix
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//ExpressionPostfix
		public RuleCall getExpressionExpressionPostfixParserRuleCall_0_2_0() { return cExpressionExpressionPostfixParserRuleCall_0_2_0; }

		//ExpressionPostfix
		public RuleCall getExpressionPostfixParserRuleCall_1() { return cExpressionPostfixParserRuleCall_1; }
	}

	public class ExpressionPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionIndexParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionVariableParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cAstExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ExpressionPostfix AstExpression:
		//	ExpressionList
		//	| ExpressionCall
		//	| ExpressionIndex
		//	| ExpressionIf
		//	| ExpressionLiteral
		//	| ExpressionVariable
		//	| '(' AstExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//ExpressionList | ExpressionCall | ExpressionIndex | ExpressionIf | ExpressionLiteral | ExpressionVariable | '('
		//AstExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0() { return cExpressionListParserRuleCall_0; }

		//ExpressionCall
		public RuleCall getExpressionCallParserRuleCall_1() { return cExpressionCallParserRuleCall_1; }

		//ExpressionIndex
		public RuleCall getExpressionIndexParserRuleCall_2() { return cExpressionIndexParserRuleCall_2; }

		//ExpressionIf
		public RuleCall getExpressionIfParserRuleCall_3() { return cExpressionIfParserRuleCall_3; }

		//ExpressionLiteral
		public RuleCall getExpressionLiteralParserRuleCall_4() { return cExpressionLiteralParserRuleCall_4; }

		//ExpressionVariable
		public RuleCall getExpressionVariableParserRuleCall_5() { return cExpressionVariableParserRuleCall_5; }

		//'(' AstExpression ')'
		public Group getGroup_6() { return cGroup_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//AstExpression
		public RuleCall getAstExpressionParserRuleCall_6_1() { return cAstExpressionParserRuleCall_6_1; }

		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}

	public class ExpressionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFunctionFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAstExpressionParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAstExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpressionCall:
		//	annotations+=AstAnnotation*
		//	function=[Function|QualifiedName] '(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* function=[Function|QualifiedName] '(' (parameters+=AstExpression (','
		//parameters+=AstExpression)*)? ')'
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//function=[Function|QualifiedName]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[Function|QualifiedName]
		public CrossReference getFunctionFunctionCrossReference_1_0() { return cFunctionFunctionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getFunctionFunctionQualifiedNameParserRuleCall_1_0_1() { return cFunctionFunctionQualifiedNameParserRuleCall_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=AstExpression (',' parameters+=AstExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_3_0_0() { return cParametersAstExpressionParserRuleCall_3_0_0; }

		//(',' parameters+=AstExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_3_1_1_0() { return cParametersAstExpressionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ExpressionIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceVariableReferenceParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExpressionIndex:
		//	source=VariableReference ('[' indexes+=AstExpression ']')+;
		@Override public ParserRule getRule() { return rule; }

		//source=VariableReference ('[' indexes+=AstExpression ']')+
		public Group getGroup() { return cGroup; }

		//source=VariableReference
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//VariableReference
		public RuleCall getSourceVariableReferenceParserRuleCall_0_0() { return cSourceVariableReferenceParserRuleCall_0_0; }

		//('[' indexes+=AstExpression ']')+
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indexes+=AstExpression
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_1_1_0() { return cIndexesAstExpressionParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ExpressionIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElsifsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElsifsExpressionElsifParserRuleCall_4_0 = (RuleCall)cElsifsAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseAstExpressionParserRuleCall_6_0 = (RuleCall)cElseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExpressionIf:
		//	'if' condition=AstExpression 'then'
		//	then=AstExpression
		//	elsifs+=ExpressionElsif*
		//	'else'
		//	else=AstExpression
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//'if' condition=AstExpression 'then' then=AstExpression elsifs+=ExpressionElsif* 'else' else=AstExpression 'end'
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=AstExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//AstExpression
		public RuleCall getThenAstExpressionParserRuleCall_3_0() { return cThenAstExpressionParserRuleCall_3_0; }

		//elsifs+=ExpressionElsif*
		public Assignment getElsifsAssignment_4() { return cElsifsAssignment_4; }

		//ExpressionElsif
		public RuleCall getElsifsExpressionElsifParserRuleCall_4_0() { return cElsifsExpressionElsifParserRuleCall_4_0; }

		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }

		//else=AstExpression
		public Assignment getElseAssignment_6() { return cElseAssignment_6; }

		//AstExpression
		public RuleCall getElseAstExpressionParserRuleCall_6_0() { return cElseAstExpressionParserRuleCall_6_0; }

		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class ExpressionElsifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionElsif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//ExpressionElsif:
		//	'elsif' condition=AstExpression 'then' then=AstExpression;
		@Override public ParserRule getRule() { return rule; }

		//'elsif' condition=AstExpression 'then' then=AstExpression
		public Group getGroup() { return cGroup; }

		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=AstExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//AstExpression
		public RuleCall getThenAstExpressionParserRuleCall_3_0() { return cThenAstExpressionParserRuleCall_3_0; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_3_1_0 = (RuleCall)cGeneratorsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_3_2_1_0 = (RuleCall)cGeneratorsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpressionList:
		//	'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=Generator (','
		//	generators+=Generator)*)? ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=Generator (','
		//generators+=Generator)*)? ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_1_0() { return cExpressionsAstExpressionParserRuleCall_1_0; }

		//(',' expressions+=AstExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_2_1_0() { return cExpressionsAstExpressionParserRuleCall_2_1_0; }

		//(':' generators+=Generator (',' generators+=Generator)*)?
		public Group getGroup_3() { return cGroup_3; }

		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//generators+=Generator
		public Assignment getGeneratorsAssignment_3_1() { return cGeneratorsAssignment_3_1; }

		//Generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_3_1_0() { return cGeneratorsGeneratorParserRuleCall_3_1_0; }

		//(',' generators+=Generator)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//generators+=Generator
		public Assignment getGeneratorsAssignment_3_2_1() { return cGeneratorsAssignment_3_2_1; }

		//Generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_3_2_1_0() { return cGeneratorsGeneratorParserRuleCall_3_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLowerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerAstExpressionParserRuleCall_3_0 = (RuleCall)cLowerAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cHigherAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHigherAstExpressionParserRuleCall_5_0 = (RuleCall)cHigherAssignment_5.eContents().get(0);
		
		//Generator:
		//	'for' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression;
		@Override public ParserRule getRule() { return rule; }

		//'for' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }

		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//lower=AstExpression
		public Assignment getLowerAssignment_3() { return cLowerAssignment_3; }

		//AstExpression
		public RuleCall getLowerAstExpressionParserRuleCall_3_0() { return cLowerAstExpressionParserRuleCall_3_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }

		//higher=AstExpression
		public Assignment getHigherAssignment_5() { return cHigherAssignment_5; }

		//AstExpression
		public RuleCall getHigherAstExpressionParserRuleCall_5_0() { return cHigherAstExpressionParserRuleCall_5_0; }
	}

	public class ExpressionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionVariable");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueVariableReferenceParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionVariable:
		//	value=VariableReference;
		@Override public ParserRule getRule() { return rule; }

		//value=VariableReference
		public Assignment getValueAssignment() { return cValueAssignment; }

		//VariableReference
		public RuleCall getValueVariableReferenceParserRuleCall_0() { return cValueVariableReferenceParserRuleCall_0; }
	}

	public class ExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// literal expressions
		/////////////////////////////////////////////////////////////////////////////////
		//ExpressionLiteral:
		//	ExpressionBoolean
		//	| ExpressionFloat
		//	| ExpressionInteger
		//	| ExpressionString;
		@Override public ParserRule getRule() { return rule; }

		//ExpressionBoolean | ExpressionFloat | ExpressionInteger | ExpressionString
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionBoolean
		public RuleCall getExpressionBooleanParserRuleCall_0() { return cExpressionBooleanParserRuleCall_0; }

		//ExpressionFloat
		public RuleCall getExpressionFloatParserRuleCall_1() { return cExpressionFloatParserRuleCall_1; }

		//ExpressionInteger
		public RuleCall getExpressionIntegerParserRuleCall_2() { return cExpressionIntegerParserRuleCall_2; }

		//ExpressionString
		public RuleCall getExpressionStringParserRuleCall_3() { return cExpressionStringParserRuleCall_3; }
	}

	public class ExpressionBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionBoolean:
		//	value=BOOL;
		@Override public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_0() { return cValueBOOLParserRuleCall_0; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }

		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class ExpressionFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionFloat:
		//	value=REAL;
		@Override public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}

	public class ExpressionIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueDECIMALTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueOCTALTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		
		//ExpressionInteger:
		//	value=(DECIMAL | OCTAL | HEX);
		@Override public ParserRule getRule() { return rule; }

		//value=(DECIMAL | OCTAL | HEX)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//(DECIMAL | OCTAL | HEX)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0_0() { return cValueDECIMALTerminalRuleCall_0_0; }

		//OCTAL
		public RuleCall getValueOCTALTerminalRuleCall_0_1() { return cValueOCTALTerminalRuleCall_0_1; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_2() { return cValueHEXTerminalRuleCall_0_2; }
	}

	public class ExpressionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ExpressionString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class AstTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstTypeBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstTypeFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstTypeHalfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstTypeDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAstTypeIntParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAstTypeListParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAstTypeStringParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAstTypeUintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// types
		/////////////////////////////////////////////////////////////////////////////////
		//AstType:
		//	AstTypeBool | AstTypeFloat | AstTypeHalf | AstTypeDouble | AstTypeInt | AstTypeList | AstTypeString | AstTypeUint;
		@Override public ParserRule getRule() { return rule; }

		//AstTypeBool | AstTypeFloat | AstTypeHalf | AstTypeDouble | AstTypeInt | AstTypeList | AstTypeString | AstTypeUint
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstTypeBool
		public RuleCall getAstTypeBoolParserRuleCall_0() { return cAstTypeBoolParserRuleCall_0; }

		//AstTypeFloat
		public RuleCall getAstTypeFloatParserRuleCall_1() { return cAstTypeFloatParserRuleCall_1; }

		//AstTypeHalf
		public RuleCall getAstTypeHalfParserRuleCall_2() { return cAstTypeHalfParserRuleCall_2; }

		//AstTypeDouble
		public RuleCall getAstTypeDoubleParserRuleCall_3() { return cAstTypeDoubleParserRuleCall_3; }

		//AstTypeInt
		public RuleCall getAstTypeIntParserRuleCall_4() { return cAstTypeIntParserRuleCall_4; }

		//AstTypeList
		public RuleCall getAstTypeListParserRuleCall_5() { return cAstTypeListParserRuleCall_5; }

		//AstTypeString
		public RuleCall getAstTypeStringParserRuleCall_6() { return cAstTypeStringParserRuleCall_6; }

		//AstTypeUint
		public RuleCall getAstTypeUintParserRuleCall_7() { return cAstTypeUintParserRuleCall_7; }
	}

	public class AstTypeBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstTypeBool:
		//	{AstTypeBool} 'bool';
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeBool} 'bool'
		public Group getGroup() { return cGroup; }

		//{AstTypeBool}
		public Action getAstTypeBoolAction_0() { return cAstTypeBoolAction_0; }

		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class AstTypeFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeFloatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstTypeFloat:
		//	{AstTypeFloat} 'float';
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeFloat} 'float'
		public Group getGroup() { return cGroup; }

		//{AstTypeFloat}
		public Action getAstTypeFloatAction_0() { return cAstTypeFloatAction_0; }

		//'float'
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class AstTypeHalfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeHalf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeHalfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHalfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstTypeHalf:
		//	{AstTypeHalf} 'half';
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeHalf} 'half'
		public Group getGroup() { return cGroup; }

		//{AstTypeHalf}
		public Action getAstTypeHalfAction_0() { return cAstTypeHalfAction_0; }

		//'half'
		public Keyword getHalfKeyword_1() { return cHalfKeyword_1; }
	}

	public class AstTypeDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstTypeDouble:
		//	{AstTypeDouble} 'double';
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeDouble} 'double'
		public Group getGroup() { return cGroup; }

		//{AstTypeDouble}
		public Action getAstTypeDoubleAction_0() { return cAstTypeDoubleAction_0; }

		//'double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class AstTypeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cSizeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSizeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSizeAstExpressionParserRuleCall_2_3_0 = (RuleCall)cSizeAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//AstTypeInt:
		//	{AstTypeInt} 'int' ('(' 'size' '=' size=AstExpression ')')?;
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeInt} 'int' ('(' 'size' '=' size=AstExpression ')')?
		public Group getGroup() { return cGroup; }

		//{AstTypeInt}
		public Action getAstTypeIntAction_0() { return cAstTypeIntAction_0; }

		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//('(' 'size' '=' size=AstExpression ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//'size'
		public Keyword getSizeKeyword_2_1() { return cSizeKeyword_2_1; }

		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//size=AstExpression
		public Assignment getSizeAssignment_2_3() { return cSizeAssignment_2_3; }

		//AstExpression
		public RuleCall getSizeAstExpressionParserRuleCall_2_3_0() { return cSizeAstExpressionParserRuleCall_2_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class AstTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeAstTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSizeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSizeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSizeAstExpressionParserRuleCall_8_0 = (RuleCall)cSizeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AstTypeList:
		//	'List' '(' 'type' ':' type=AstType ',' 'size' '=' size=AstExpression ')';
		@Override public ParserRule getRule() { return rule; }

		//'List' '(' 'type' ':' type=AstType ',' 'size' '=' size=AstExpression ')'
		public Group getGroup() { return cGroup; }

		//'List'
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=AstType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_4_0() { return cTypeAstTypeParserRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//'size'
		public Keyword getSizeKeyword_6() { return cSizeKeyword_6; }

		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//size=AstExpression
		public Assignment getSizeAssignment_8() { return cSizeAssignment_8; }

		//AstExpression
		public RuleCall getSizeAstExpressionParserRuleCall_8_0() { return cSizeAstExpressionParserRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class AstTypeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstTypeString:
		//	{AstTypeString} 'String';
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeString} 'String'
		public Group getGroup() { return cGroup; }

		//{AstTypeString}
		public Action getAstTypeStringAction_0() { return cAstTypeStringAction_0; }

		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class AstTypeUintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstTypeUint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeUintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cSizeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSizeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSizeAstExpressionParserRuleCall_2_3_0 = (RuleCall)cSizeAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//AstTypeUint:
		//	{AstTypeUint} 'uint' ('(' 'size' '=' size=AstExpression ')')?;
		@Override public ParserRule getRule() { return rule; }

		//{AstTypeUint} 'uint' ('(' 'size' '=' size=AstExpression ')')?
		public Group getGroup() { return cGroup; }

		//{AstTypeUint}
		public Action getAstTypeUintAction_0() { return cAstTypeUintAction_0; }

		//'uint'
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }

		//('(' 'size' '=' size=AstExpression ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//'size'
		public Keyword getSizeKeyword_2_1() { return cSizeKeyword_2_1; }

		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//size=AstExpression
		public Assignment getSizeAssignment_2_3() { return cSizeAssignment_2_3; }

		//AstExpression
		public RuleCall getSizeAstExpressionParserRuleCall_2_3_0() { return cSizeAstExpressionParserRuleCall_2_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// variables
		/////////////////////////////////////////////////////////////////////////////////
		//// any variable declaration may have annotations
		//VariableDeclaration Variable:
		//	annotations+=AstAnnotation*
		//	type=AstType
		//	name=ID ('[' dimensions+=AstExpression ']')*
		@Override public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* type=AstType name=ID ('[' dimensions+=AstExpression ']')*
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//('[' dimensions+=AstExpression ']')*
		public Group getGroup_3() { return cGroup_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_3_1_0() { return cDimensionsAstExpressionParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class ValuedVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstantEqualsSignKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ValuedVariableDeclaration Variable:
		//	VariableDeclaration ((constant?='=' | ':=') value=AstExpression)?
		@Override public ParserRule getRule() { return rule; }

		//VariableDeclaration ((constant?='=' | ':=') value=AstExpression)?
		public Group getGroup() { return cGroup; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//((constant?='=' | ':=') value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//(constant?='=' | ':=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//constant?='='
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }

		//'='
		public Keyword getConstantEqualsSignKeyword_1_0_0_0() { return cConstantEqualsSignKeyword_1_0_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_0_1() { return cColonEqualsSignKeyword_1_0_1; }

		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableQualifiedNameParserRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//	variable=[Variable|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//variable=[Variable|QualifiedName]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[Variable|QualifiedName]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }

		//QualifiedName
		public RuleCall getVariableVariableQualifiedNameParserRuleCall_0_1() { return cVariableVariableQualifiedNameParserRuleCall_0_1; }
	}

	public class AstAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AstAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsAnnotationArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsAnnotationArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// annotations
		/////////////////////////////////////////////////////////////////////////////////
		//AstAnnotation:
		//	'@' name=ID ('(' arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'@' name=ID ('(' arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)* ')')?
		public Group getGroup() { return cGroup; }

		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('(' arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//arguments+=AnnotationArgument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//AnnotationArgument
		public RuleCall getArgumentsAnnotationArgumentParserRuleCall_2_1_0() { return cArgumentsAnnotationArgumentParserRuleCall_2_1_0; }

		//(',' arguments+=AnnotationArgument)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=AnnotationArgument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//AnnotationArgument
		public RuleCall getArgumentsAnnotationArgumentParserRuleCall_2_2_1_0() { return cArgumentsAnnotationArgumentParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.AnnotationArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//AnnotationArgument:
		//	name=ID ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ('=' value=STRING)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//('=' value=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
	}
	
	
	private final AstEntityElements pAstEntity;
	private final ImportElements pImport;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final AstUnitElements pAstUnit;
	private final ConstantVariableElements pConstantVariable;
	private final AstActorElements pAstActor;
	private final AstPortElements pAstPort;
	private final FunctionElements pFunction;
	private final AstProcedureElements pAstProcedure;
	private final ActorParameterElements pActorParameter;
	private final StateVariableElements pStateVariable;
	private final AstTagElements pAstTag;
	private final InequalityElements pInequality;
	private final PriorityElements pPriority;
	private final ScheduleFsmElements pScheduleFsm;
	private final FsmElements pFsm;
	private final AstTransitionElements pAstTransition;
	private final ExternalTargetElements pExternalTarget;
	private final AstStateElements pAstState;
	private final ScheduleRegExpElements pScheduleRegExp;
	private final RegExpElements pRegExp;
	private final RegExpConcatenationElements pRegExpConcatenation;
	private final RegExpPostfixElements pRegExpPostfix;
	private final RegExpGroupingElements pRegExpGrouping;
	private final RegExpTerminalElements pRegExpTerminal;
	private final LocalFsmElements pLocalFsm;
	private final AstActionElements pAstAction;
	private final InitializeElements pInitialize;
	private final TokenElements pToken;
	private final InputPatternElements pInputPattern;
	private final OutputPatternElements pOutputPattern;
	private final GuardElements pGuard;
	private final StatementAssignElements pStatementAssign;
	private final StatementCallElements pStatementCall;
	private final StatementForeachElements pStatementForeach;
	private final StatementIfElements pStatementIf;
	private final StatementElsifElements pStatementElsif;
	private final StatementWhileElements pStatementWhile;
	private final StatementElements pStatement;
	private final AstExpressionElements pAstExpression;
	private final ExpressionAndElements pExpressionAnd;
	private final ExpressionBitorElements pExpressionBitor;
	private final ExpressionBitxorElements pExpressionBitxor;
	private final ExpressionBitandElements pExpressionBitand;
	private final ExpressionEqElements pExpressionEq;
	private final ExpressionRelationalElements pExpressionRelational;
	private final ExpressionShiftElements pExpressionShift;
	private final ExpressionAdditiveElements pExpressionAdditive;
	private final ExpressionMultiplicativeElements pExpressionMultiplicative;
	private final ExpressionExpElements pExpressionExp;
	private final ExpressionUnaryElements pExpressionUnary;
	private final ExpressionPostfixElements pExpressionPostfix;
	private final ExpressionCallElements pExpressionCall;
	private final ExpressionIndexElements pExpressionIndex;
	private final ExpressionIfElements pExpressionIf;
	private final ExpressionElsifElements pExpressionElsif;
	private final ExpressionListElements pExpressionList;
	private final GeneratorElements pGenerator;
	private final ExpressionVariableElements pExpressionVariable;
	private final ExpressionLiteralElements pExpressionLiteral;
	private final ExpressionBooleanElements pExpressionBoolean;
	private final BOOLElements pBOOL;
	private final ExpressionFloatElements pExpressionFloat;
	private final TerminalRule tREAL;
	private final ExpressionIntegerElements pExpressionInteger;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tOCTAL;
	private final TerminalRule tHEX;
	private final ExpressionStringElements pExpressionString;
	private final AstTypeElements pAstType;
	private final AstTypeBoolElements pAstTypeBool;
	private final AstTypeFloatElements pAstTypeFloat;
	private final AstTypeHalfElements pAstTypeHalf;
	private final AstTypeDoubleElements pAstTypeDouble;
	private final AstTypeIntElements pAstTypeInt;
	private final AstTypeListElements pAstTypeList;
	private final AstTypeStringElements pAstTypeString;
	private final AstTypeUintElements pAstTypeUint;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ValuedVariableDeclarationElements pValuedVariableDeclaration;
	private final VariableReferenceElements pVariableReference;
	private final AstAnnotationElements pAstAnnotation;
	private final AnnotationArgumentElements pAnnotationArgument;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAstEntity = new AstEntityElements();
		this.pImport = new ImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pAstUnit = new AstUnitElements();
		this.pConstantVariable = new ConstantVariableElements();
		this.pAstActor = new AstActorElements();
		this.pAstPort = new AstPortElements();
		this.pFunction = new FunctionElements();
		this.pAstProcedure = new AstProcedureElements();
		this.pActorParameter = new ActorParameterElements();
		this.pStateVariable = new StateVariableElements();
		this.pAstTag = new AstTagElements();
		this.pInequality = new InequalityElements();
		this.pPriority = new PriorityElements();
		this.pScheduleFsm = new ScheduleFsmElements();
		this.pFsm = new FsmElements();
		this.pAstTransition = new AstTransitionElements();
		this.pExternalTarget = new ExternalTargetElements();
		this.pAstState = new AstStateElements();
		this.pScheduleRegExp = new ScheduleRegExpElements();
		this.pRegExp = new RegExpElements();
		this.pRegExpConcatenation = new RegExpConcatenationElements();
		this.pRegExpPostfix = new RegExpPostfixElements();
		this.pRegExpGrouping = new RegExpGroupingElements();
		this.pRegExpTerminal = new RegExpTerminalElements();
		this.pLocalFsm = new LocalFsmElements();
		this.pAstAction = new AstActionElements();
		this.pInitialize = new InitializeElements();
		this.pToken = new TokenElements();
		this.pInputPattern = new InputPatternElements();
		this.pOutputPattern = new OutputPatternElements();
		this.pGuard = new GuardElements();
		this.pStatementAssign = new StatementAssignElements();
		this.pStatementCall = new StatementCallElements();
		this.pStatementForeach = new StatementForeachElements();
		this.pStatementIf = new StatementIfElements();
		this.pStatementElsif = new StatementElsifElements();
		this.pStatementWhile = new StatementWhileElements();
		this.pStatement = new StatementElements();
		this.pAstExpression = new AstExpressionElements();
		this.pExpressionAnd = new ExpressionAndElements();
		this.pExpressionBitor = new ExpressionBitorElements();
		this.pExpressionBitxor = new ExpressionBitxorElements();
		this.pExpressionBitand = new ExpressionBitandElements();
		this.pExpressionEq = new ExpressionEqElements();
		this.pExpressionRelational = new ExpressionRelationalElements();
		this.pExpressionShift = new ExpressionShiftElements();
		this.pExpressionAdditive = new ExpressionAdditiveElements();
		this.pExpressionMultiplicative = new ExpressionMultiplicativeElements();
		this.pExpressionExp = new ExpressionExpElements();
		this.pExpressionUnary = new ExpressionUnaryElements();
		this.pExpressionPostfix = new ExpressionPostfixElements();
		this.pExpressionCall = new ExpressionCallElements();
		this.pExpressionIndex = new ExpressionIndexElements();
		this.pExpressionIf = new ExpressionIfElements();
		this.pExpressionElsif = new ExpressionElsifElements();
		this.pExpressionList = new ExpressionListElements();
		this.pGenerator = new GeneratorElements();
		this.pExpressionVariable = new ExpressionVariableElements();
		this.pExpressionLiteral = new ExpressionLiteralElements();
		this.pExpressionBoolean = new ExpressionBooleanElements();
		this.pBOOL = new BOOLElements();
		this.pExpressionFloat = new ExpressionFloatElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.REAL");
		this.pExpressionInteger = new ExpressionIntegerElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.DECIMAL");
		this.tOCTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.OCTAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "net.sf.orcc.cal.Cal.HEX");
		this.pExpressionString = new ExpressionStringElements();
		this.pAstType = new AstTypeElements();
		this.pAstTypeBool = new AstTypeBoolElements();
		this.pAstTypeFloat = new AstTypeFloatElements();
		this.pAstTypeHalf = new AstTypeHalfElements();
		this.pAstTypeDouble = new AstTypeDoubleElements();
		this.pAstTypeInt = new AstTypeIntElements();
		this.pAstTypeList = new AstTypeListElements();
		this.pAstTypeString = new AstTypeStringElements();
		this.pAstTypeUint = new AstTypeUintElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pValuedVariableDeclaration = new ValuedVariableDeclarationElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pAstAnnotation = new AstAnnotationElements();
		this.pAnnotationArgument = new AnnotationArgumentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.sf.orcc.cal.Cal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////////////////////////////////////////////////////////////////////////////
	//// top-level entity
	/////////////////////////////////////////////////////////////////////////////////
	//AstEntity:
	//	('package' package=QualifiedName ';')?
	//	imports+=Import*
	//	annotations+=AstAnnotation* ('actor' name=ID actor=AstActor | 'unit' name=ID unit=AstUnit);
	public AstEntityElements getAstEntityAccess() {
		return pAstEntity;
	}
	
	public ParserRule getAstEntityRule() {
		return getAstEntityAccess().getRule();
	}

	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildCard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// unit
	/////////////////////////////////////////////////////////////////////////////////
	//AstUnit:
	//	{AstUnit} ':' (functions+=Function
	//	| procedures+=AstProcedure
	//	| variables+=ConstantVariable)*
	//	'end';
	public AstUnitElements getAstUnitAccess() {
		return pAstUnit;
	}
	
	public ParserRule getAstUnitRule() {
		return getAstUnitAccess().getRule();
	}

	//ConstantVariable Variable:
	//	VariableDeclaration constant?='=' value=AstExpression ';'
	public ConstantVariableElements getConstantVariableAccess() {
		return pConstantVariable;
	}
	
	public ParserRule getConstantVariableRule() {
		return getConstantVariableAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// actor
	/////////////////////////////////////////////////////////////////////////////////
	//AstActor:
	//	{AstActor}
	//	'(' (parameters+=ActorParameter (',' parameters+=ActorParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)?
	//	'==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=Function
	//	| procedures+=AstProcedure
	//	| actions+=AstAction
	//	| initializes+=Initialize
	//	| stateVariables+=StateVariable
	//	| localFsms+=LocalFsm)* (scheduleFsm=ScheduleFsm | scheduleRegExp=ScheduleRegExp)?
	//	priorities+=Priority*
	//	'end';
	public AstActorElements getAstActorAccess() {
		return pAstActor;
	}
	
	public ParserRule getAstActorRule() {
		return getAstActorAccess().getRule();
	}

	//AstPort:
	//	annotations+=AstAnnotation* type=AstType name=ID;
	public AstPortElements getAstPortAccess() {
		return pAstPort;
	}
	
	public ParserRule getAstPortRule() {
		return getAstPortAccess().getRule();
	}

	//Function:
	//	annotations+=AstAnnotation*
	//	'function' name=ID
	//	'(' (parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
	//	')' '-->' type=AstType (('var'
	//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ':'
	//	expression=AstExpression)?
	//	'end';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//AstProcedure:
	//	annotations+=AstAnnotation*
	//	'procedure' name=ID
	//	'(' (parameters+=VariableDeclaration (',' parameters+=VariableDeclaration)*)?
	//	')' (('var'
	//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)?
	//	'begin'
	//	statements+=Statement*)?
	//	'end';
	public AstProcedureElements getAstProcedureAccess() {
		return pAstProcedure;
	}
	
	public ParserRule getAstProcedureRule() {
		return getAstProcedureAccess().getRule();
	}

	//ActorParameter Variable:
	//	VariableDeclaration ('=' value=AstExpression)?
	public ActorParameterElements getActorParameterAccess() {
		return pActorParameter;
	}
	
	public ParserRule getActorParameterRule() {
		return getActorParameterAccess().getRule();
	}

	//StateVariable Variable:
	//	ValuedVariableDeclaration ';'
	public StateVariableElements getStateVariableAccess() {
		return pStateVariable;
	}
	
	public ParserRule getStateVariableRule() {
		return getStateVariableAccess().getRule();
	}

	//AstTag:
	//	identifiers+=ID ('.' identifiers+=ID)*;
	public AstTagElements getAstTagAccess() {
		return pAstTag;
	}
	
	public ParserRule getAstTagRule() {
		return getAstTagAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// priorities
	/////////////////////////////////////////////////////////////////////////////////
	//Inequality:
	//	tags+=AstTag ('>' tags+=AstTag)+ ';';
	public InequalityElements getInequalityAccess() {
		return pInequality;
	}
	
	public ParserRule getInequalityRule() {
		return getInequalityAccess().getRule();
	}

	//Priority:
	//	{Priority}
	//	'priority'
	//	inequalities+=Inequality*
	//	'end';
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// schedule
	/////////////////////////////////////////////////////////////////////////////////
	//// FSM schedule
	//ScheduleFsm:
	//	'schedule' 'fsm' initialState=[AstState] ':'
	//	contents=Fsm
	//	'end';
	public ScheduleFsmElements getScheduleFsmAccess() {
		return pScheduleFsm;
	}
	
	public ParserRule getScheduleFsmRule() {
		return getScheduleFsmAccess().getRule();
	}

	//Fsm:
	//	{Fsm} transitions+=AstTransition*;
	public FsmElements getFsmAccess() {
		return pFsm;
	}
	
	public ParserRule getFsmRule() {
		return getFsmAccess().getRule();
	}

	//AstTransition:
	//	source=[AstState] '(' tag=AstTag ')' '-->' (target=[AstState] | externalTarget=ExternalTarget) ';';
	public AstTransitionElements getAstTransitionAccess() {
		return pAstTransition;
	}
	
	public ParserRule getAstTransitionRule() {
		return getAstTransitionAccess().getRule();
	}

	//ExternalTarget:
	//	fsm=[LocalFsm] '.' state=[AstState] '(' from=[AstState] '=>' to=[AstState] ')';
	public ExternalTargetElements getExternalTargetAccess() {
		return pExternalTarget;
	}
	
	public ParserRule getExternalTargetRule() {
		return getExternalTargetAccess().getRule();
	}

	//AstState:
	//	name=ID;
	public AstStateElements getAstStateAccess() {
		return pAstState;
	}
	
	public ParserRule getAstStateRule() {
		return getAstStateAccess().getRule();
	}

	//// regular expression schedule
	//ScheduleRegExp RegExp:
	//	'schedule' 'regexp' exp=RegExp 'end'
	public ScheduleRegExpElements getScheduleRegExpAccess() {
		return pScheduleRegExp;
	}
	
	public ParserRule getScheduleRegExpRule() {
		return getScheduleRegExpAccess().getRule();
	}

	//RegExp:
	//	RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*;
	public RegExpElements getRegExpAccess() {
		return pRegExp;
	}
	
	public ParserRule getRegExpRule() {
		return getRegExpAccess().getRule();
	}

	//RegExpConcatenation RegExp:
	//	RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*
	public RegExpConcatenationElements getRegExpConcatenationAccess() {
		return pRegExpConcatenation;
	}
	
	public ParserRule getRegExpConcatenationRule() {
		return getRegExpConcatenationAccess().getRule();
	}

	//RegExpPostfix RegExp:
	//	RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
	public RegExpPostfixElements getRegExpPostfixAccess() {
		return pRegExpPostfix;
	}
	
	public ParserRule getRegExpPostfixRule() {
		return getRegExpPostfixAccess().getRule();
	}

	//RegExpGrouping RegExp:
	//	RegExpTerminal
	//	| '(' RegExp ')'
	public RegExpGroupingElements getRegExpGroupingAccess() {
		return pRegExpGrouping;
	}
	
	public ParserRule getRegExpGroupingRule() {
		return getRegExpGroupingAccess().getRule();
	}

	//RegExpTerminal RegExp:
	//	{RegExpTag} tag=AstTag
	public RegExpTerminalElements getRegExpTerminalAccess() {
		return pRegExpTerminal;
	}
	
	public ParserRule getRegExpTerminalRule() {
		return getRegExpTerminalAccess().getRule();
	}

	//// local FSM
	//LocalFsm:
	//	'local' 'fsm' name=ID ':'
	//	contents=Fsm
	//	'end';
	public LocalFsmElements getLocalFsmAccess() {
		return pLocalFsm;
	}
	
	public ParserRule getLocalFsmRule() {
		return getLocalFsmAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// actions
	/////////////////////////////////////////////////////////////////////////////////
	//AstAction:
	//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
	//	'action' (inputs+=InputPattern (',' inputs+=InputPattern)*)?
	//	'==>' (outputs+=OutputPattern (',' outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var'
	//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ('do'
	//	statements+=Statement*)?
	//	'end';
	public AstActionElements getAstActionAccess() {
		return pAstAction;
	}
	
	public ParserRule getAstActionRule() {
		return getAstActionAccess().getRule();
	}

	//Initialize AstAction:
	//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
	//	'initialize'
	//	'==>' (outputs+=OutputPattern (',' outputs+=OutputPattern)*)? ('guard' guard=Guard)? ('var'
	//	variables+=ValuedVariableDeclaration (',' variables+=ValuedVariableDeclaration)*)? ('do'
	//	statements+=Statement*)?
	//	'end'
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}

	//Token Variable:
	//	name=ID
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//InputPattern:
	//	port=[AstPort] ':' '[' tokens+=Token (',' tokens+=Token)* ']' ('repeat' repeat=AstExpression)?;
	public InputPatternElements getInputPatternAccess() {
		return pInputPattern;
	}
	
	public ParserRule getInputPatternRule() {
		return getInputPatternAccess().getRule();
	}

	//OutputPattern:
	//	port=[AstPort] ':' '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?;
	public OutputPatternElements getOutputPatternAccess() {
		return pOutputPattern;
	}
	
	public ParserRule getOutputPatternRule() {
		return getOutputPatternAccess().getRule();
	}

	//Guard:
	//	{Guard} expressions+=AstExpression (',' expressions+=AstExpression)*;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// statements
	/////////////////////////////////////////////////////////////////////////////////
	//StatementAssign:
	//	annotations+=AstAnnotation*
	//	target=VariableReference ('[' indexes+=AstExpression ']')* ':=' value=AstExpression ';';
	public StatementAssignElements getStatementAssignAccess() {
		return pStatementAssign;
	}
	
	public ParserRule getStatementAssignRule() {
		return getStatementAssignAccess().getRule();
	}

	//StatementCall:
	//	annotations+=AstAnnotation*
	//	procedure=[AstProcedure|QualifiedName]
	//	'(' (arguments+=AstExpression (',' arguments+=AstExpression)*)? ')' ';';
	public StatementCallElements getStatementCallAccess() {
		return pStatementCall;
	}
	
	public ParserRule getStatementCallRule() {
		return getStatementCallAccess().getRule();
	}

	//StatementForeach:
	//	annotations+=AstAnnotation*
	//	'foreach' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression
	//	'do'
	//	statements+=Statement*
	//	'end';
	public StatementForeachElements getStatementForeachAccess() {
		return pStatementForeach;
	}
	
	public ParserRule getStatementForeachRule() {
		return getStatementForeachAccess().getRule();
	}

	//StatementIf:
	//	annotations+=AstAnnotation*
	//	'if' condition=AstExpression 'then'
	//	then+=Statement*
	//	elsifs+=StatementElsif* ('else' else+=Statement*)?
	//	'end';
	public StatementIfElements getStatementIfAccess() {
		return pStatementIf;
	}
	
	public ParserRule getStatementIfRule() {
		return getStatementIfAccess().getRule();
	}

	//StatementElsif:
	//	'elsif' condition=AstExpression 'then'
	//	then+=Statement*;
	public StatementElsifElements getStatementElsifAccess() {
		return pStatementElsif;
	}
	
	public ParserRule getStatementElsifRule() {
		return getStatementElsifAccess().getRule();
	}

	//StatementWhile:
	//	annotations+=AstAnnotation*
	//	'while' condition=AstExpression 'do'
	//	statements+=Statement*
	//	'end';
	public StatementWhileElements getStatementWhileAccess() {
		return pStatementWhile;
	}
	
	public ParserRule getStatementWhileRule() {
		return getStatementWhileAccess().getRule();
	}

	//Statement:
	//	StatementAssign
	//	| StatementCall
	//	| StatementForeach
	//	| StatementIf
	//	| StatementWhile;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// expressions
	/////////////////////////////////////////////////////////////////////////////////
	//AstExpression:
	//	ExpressionAnd ({ExpressionBinary.left=current} operator=('||' | 'or') right=ExpressionAnd)*;
	public AstExpressionElements getAstExpressionAccess() {
		return pAstExpression;
	}
	
	public ParserRule getAstExpressionRule() {
		return getAstExpressionAccess().getRule();
	}

	//ExpressionAnd AstExpression:
	//	ExpressionBitor ({ExpressionBinary.left=current} operator=('&&' | 'and') right=ExpressionBitor)*
	public ExpressionAndElements getExpressionAndAccess() {
		return pExpressionAnd;
	}
	
	public ParserRule getExpressionAndRule() {
		return getExpressionAndAccess().getRule();
	}

	//ExpressionBitor AstExpression:
	//	ExpressionBitxor ({ExpressionBinary.left=current} operator='|' right=ExpressionBitxor)*
	public ExpressionBitorElements getExpressionBitorAccess() {
		return pExpressionBitor;
	}
	
	public ParserRule getExpressionBitorRule() {
		return getExpressionBitorAccess().getRule();
	}

	//ExpressionBitxor AstExpression:
	//	ExpressionBitand ({ExpressionBinary.left=current} operator='^' right=ExpressionBitand)*
	public ExpressionBitxorElements getExpressionBitxorAccess() {
		return pExpressionBitxor;
	}
	
	public ParserRule getExpressionBitxorRule() {
		return getExpressionBitxorAccess().getRule();
	}

	//ExpressionBitand AstExpression:
	//	ExpressionEq ({ExpressionBinary.left=current} operator='&' right=ExpressionEq)*
	public ExpressionBitandElements getExpressionBitandAccess() {
		return pExpressionBitand;
	}
	
	public ParserRule getExpressionBitandRule() {
		return getExpressionBitandAccess().getRule();
	}

	//ExpressionEq AstExpression:
	//	ExpressionRelational ({ExpressionBinary.left=current} operator=('=' | '!=') right=ExpressionRelational)*
	public ExpressionEqElements getExpressionEqAccess() {
		return pExpressionEq;
	}
	
	public ParserRule getExpressionEqRule() {
		return getExpressionEqAccess().getRule();
	}

	//ExpressionRelational AstExpression:
	//	ExpressionShift ({ExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=ExpressionShift)*
	public ExpressionRelationalElements getExpressionRelationalAccess() {
		return pExpressionRelational;
	}
	
	public ParserRule getExpressionRelationalRule() {
		return getExpressionRelationalAccess().getRule();
	}

	//ExpressionShift AstExpression:
	//	ExpressionAdditive ({ExpressionBinary.left=current} operator=('<<' | '>>') right=ExpressionAdditive)*
	public ExpressionShiftElements getExpressionShiftAccess() {
		return pExpressionShift;
	}
	
	public ParserRule getExpressionShiftRule() {
		return getExpressionShiftAccess().getRule();
	}

	//ExpressionAdditive AstExpression:
	//	ExpressionMultiplicative ({ExpressionBinary.left=current} operator=('+' | '-') right=ExpressionMultiplicative)*
	public ExpressionAdditiveElements getExpressionAdditiveAccess() {
		return pExpressionAdditive;
	}
	
	public ParserRule getExpressionAdditiveRule() {
		return getExpressionAdditiveAccess().getRule();
	}

	//ExpressionMultiplicative AstExpression:
	//	ExpressionExp ({ExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=ExpressionExp)*
	public ExpressionMultiplicativeElements getExpressionMultiplicativeAccess() {
		return pExpressionMultiplicative;
	}
	
	public ParserRule getExpressionMultiplicativeRule() {
		return getExpressionMultiplicativeAccess().getRule();
	}

	//ExpressionExp AstExpression:
	//	ExpressionUnary ({ExpressionBinary.left=current} operator='**' right=ExpressionUnary)*
	public ExpressionExpElements getExpressionExpAccess() {
		return pExpressionExp;
	}
	
	public ParserRule getExpressionExpRule() {
		return getExpressionExpAccess().getRule();
	}

	//ExpressionUnary AstExpression:
	//	{ExpressionUnary} unaryOperator=('~' | 'not' | '-' | '#') expression=ExpressionPostfix
	//	| ExpressionPostfix
	public ExpressionUnaryElements getExpressionUnaryAccess() {
		return pExpressionUnary;
	}
	
	public ParserRule getExpressionUnaryRule() {
		return getExpressionUnaryAccess().getRule();
	}

	//ExpressionPostfix AstExpression:
	//	ExpressionList
	//	| ExpressionCall
	//	| ExpressionIndex
	//	| ExpressionIf
	//	| ExpressionLiteral
	//	| ExpressionVariable
	//	| '(' AstExpression ')'
	public ExpressionPostfixElements getExpressionPostfixAccess() {
		return pExpressionPostfix;
	}
	
	public ParserRule getExpressionPostfixRule() {
		return getExpressionPostfixAccess().getRule();
	}

	//ExpressionCall:
	//	annotations+=AstAnnotation*
	//	function=[Function|QualifiedName] '(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')';
	public ExpressionCallElements getExpressionCallAccess() {
		return pExpressionCall;
	}
	
	public ParserRule getExpressionCallRule() {
		return getExpressionCallAccess().getRule();
	}

	//ExpressionIndex:
	//	source=VariableReference ('[' indexes+=AstExpression ']')+;
	public ExpressionIndexElements getExpressionIndexAccess() {
		return pExpressionIndex;
	}
	
	public ParserRule getExpressionIndexRule() {
		return getExpressionIndexAccess().getRule();
	}

	//ExpressionIf:
	//	'if' condition=AstExpression 'then'
	//	then=AstExpression
	//	elsifs+=ExpressionElsif*
	//	'else'
	//	else=AstExpression
	//	'end';
	public ExpressionIfElements getExpressionIfAccess() {
		return pExpressionIf;
	}
	
	public ParserRule getExpressionIfRule() {
		return getExpressionIfAccess().getRule();
	}

	//ExpressionElsif:
	//	'elsif' condition=AstExpression 'then' then=AstExpression;
	public ExpressionElsifElements getExpressionElsifAccess() {
		return pExpressionElsif;
	}
	
	public ParserRule getExpressionElsifRule() {
		return getExpressionElsifAccess().getRule();
	}

	//ExpressionList:
	//	'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=Generator (','
	//	generators+=Generator)*)? ']';
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//Generator:
	//	'for' variable=VariableDeclaration 'in' lower=AstExpression '..' higher=AstExpression;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}

	//ExpressionVariable:
	//	value=VariableReference;
	public ExpressionVariableElements getExpressionVariableAccess() {
		return pExpressionVariable;
	}
	
	public ParserRule getExpressionVariableRule() {
		return getExpressionVariableAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// literal expressions
	/////////////////////////////////////////////////////////////////////////////////
	//ExpressionLiteral:
	//	ExpressionBoolean
	//	| ExpressionFloat
	//	| ExpressionInteger
	//	| ExpressionString;
	public ExpressionLiteralElements getExpressionLiteralAccess() {
		return pExpressionLiteral;
	}
	
	public ParserRule getExpressionLiteralRule() {
		return getExpressionLiteralAccess().getRule();
	}

	//ExpressionBoolean:
	//	value=BOOL;
	public ExpressionBooleanElements getExpressionBooleanAccess() {
		return pExpressionBoolean;
	}
	
	public ParserRule getExpressionBooleanRule() {
		return getExpressionBooleanAccess().getRule();
	}

	//BOOL ecore::EBoolean:
	//	'true' | 'false'
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//ExpressionFloat:
	//	value=REAL;
	public ExpressionFloatElements getExpressionFloatAccess() {
		return pExpressionFloat;
	}
	
	public ParserRule getExpressionFloatRule() {
		return getExpressionFloatAccess().getRule();
	}

	//terminal REAL returns ecore::EFloat:
	//	'0'..'9'+ '.' '0'..'9'* (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '0'..'9'+ ('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//ExpressionInteger:
	//	value=(DECIMAL | OCTAL | HEX);
	public ExpressionIntegerElements getExpressionIntegerAccess() {
		return pExpressionInteger;
	}
	
	public ParserRule getExpressionIntegerRule() {
		return getExpressionIntegerAccess().getRule();
	}

	//terminal DECIMAL returns ecore::EBigInteger:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	} 

	//terminal OCTAL returns ecore::EBigInteger:
	//	'0' '0'..'7'*;
	public TerminalRule getOCTALRule() {
		return tOCTAL;
	} 

	//terminal HEX returns ecore::EBigInteger:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//ExpressionString:
	//	value=STRING;
	public ExpressionStringElements getExpressionStringAccess() {
		return pExpressionString;
	}
	
	public ParserRule getExpressionStringRule() {
		return getExpressionStringAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// types
	/////////////////////////////////////////////////////////////////////////////////
	//AstType:
	//	AstTypeBool | AstTypeFloat | AstTypeHalf | AstTypeDouble | AstTypeInt | AstTypeList | AstTypeString | AstTypeUint;
	public AstTypeElements getAstTypeAccess() {
		return pAstType;
	}
	
	public ParserRule getAstTypeRule() {
		return getAstTypeAccess().getRule();
	}

	//AstTypeBool:
	//	{AstTypeBool} 'bool';
	public AstTypeBoolElements getAstTypeBoolAccess() {
		return pAstTypeBool;
	}
	
	public ParserRule getAstTypeBoolRule() {
		return getAstTypeBoolAccess().getRule();
	}

	//AstTypeFloat:
	//	{AstTypeFloat} 'float';
	public AstTypeFloatElements getAstTypeFloatAccess() {
		return pAstTypeFloat;
	}
	
	public ParserRule getAstTypeFloatRule() {
		return getAstTypeFloatAccess().getRule();
	}

	//AstTypeHalf:
	//	{AstTypeHalf} 'half';
	public AstTypeHalfElements getAstTypeHalfAccess() {
		return pAstTypeHalf;
	}
	
	public ParserRule getAstTypeHalfRule() {
		return getAstTypeHalfAccess().getRule();
	}

	//AstTypeDouble:
	//	{AstTypeDouble} 'double';
	public AstTypeDoubleElements getAstTypeDoubleAccess() {
		return pAstTypeDouble;
	}
	
	public ParserRule getAstTypeDoubleRule() {
		return getAstTypeDoubleAccess().getRule();
	}

	//AstTypeInt:
	//	{AstTypeInt} 'int' ('(' 'size' '=' size=AstExpression ')')?;
	public AstTypeIntElements getAstTypeIntAccess() {
		return pAstTypeInt;
	}
	
	public ParserRule getAstTypeIntRule() {
		return getAstTypeIntAccess().getRule();
	}

	//AstTypeList:
	//	'List' '(' 'type' ':' type=AstType ',' 'size' '=' size=AstExpression ')';
	public AstTypeListElements getAstTypeListAccess() {
		return pAstTypeList;
	}
	
	public ParserRule getAstTypeListRule() {
		return getAstTypeListAccess().getRule();
	}

	//AstTypeString:
	//	{AstTypeString} 'String';
	public AstTypeStringElements getAstTypeStringAccess() {
		return pAstTypeString;
	}
	
	public ParserRule getAstTypeStringRule() {
		return getAstTypeStringAccess().getRule();
	}

	//AstTypeUint:
	//	{AstTypeUint} 'uint' ('(' 'size' '=' size=AstExpression ')')?;
	public AstTypeUintElements getAstTypeUintAccess() {
		return pAstTypeUint;
	}
	
	public ParserRule getAstTypeUintRule() {
		return getAstTypeUintAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// variables
	/////////////////////////////////////////////////////////////////////////////////
	//// any variable declaration may have annotations
	//VariableDeclaration Variable:
	//	annotations+=AstAnnotation*
	//	type=AstType
	//	name=ID ('[' dimensions+=AstExpression ']')*
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//ValuedVariableDeclaration Variable:
	//	VariableDeclaration ((constant?='=' | ':=') value=AstExpression)?
	public ValuedVariableDeclarationElements getValuedVariableDeclarationAccess() {
		return pValuedVariableDeclaration;
	}
	
	public ParserRule getValuedVariableDeclarationRule() {
		return getValuedVariableDeclarationAccess().getRule();
	}

	//VariableReference:
	//	variable=[Variable|QualifiedName];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// annotations
	/////////////////////////////////////////////////////////////////////////////////
	//AstAnnotation:
	//	'@' name=ID ('(' arguments+=AnnotationArgument (',' arguments+=AnnotationArgument)* ')')?;
	public AstAnnotationElements getAstAnnotationAccess() {
		return pAstAnnotation;
	}
	
	public ParserRule getAstAnnotationRule() {
		return getAstAnnotationAccess().getRule();
	}

	//AnnotationArgument:
	//	name=ID ('=' value=STRING)?;
	public AnnotationArgumentElements getAnnotationArgumentAccess() {
		return pAnnotationArgument;
	}
	
	public ParserRule getAnnotationArgumentRule() {
		return getAnnotationArgumentAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
