/*
 * generated by Xtext
 */
grammar InternalCal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.sf.orcc.cal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.sf.orcc.cal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.sf.orcc.cal.services.CalGrammarAccess;

}

@parser::members {

 	private CalGrammarAccess grammarAccess;
 	
    public InternalCalParser(TokenStream input, CalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AstEntity";	
   	}
   	
   	@Override
   	protected CalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAstEntity
entryRuleAstEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstEntityRule()); }
	 iv_ruleAstEntity=ruleAstEntity 
	 { $current=$iv_ruleAstEntity.current; } 
	 EOF 
;

// Rule AstEntity
ruleAstEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAstEntityAccess().getPackageKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstEntityAccess().getPackageQualifiedNameParserRuleCall_0_1_0()); 
	    }
		lv_package_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstEntityRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"net.sf.orcc.cal.Cal.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAstEntityAccess().getSemicolonKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAstEntityAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstEntityRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"net.sf.orcc.cal.Cal.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAstEntityAccess().getAnnotationsAstAnnotationParserRuleCall_2_0()); 
	    }
		lv_annotations_4_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstEntityRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_5='actor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstEntityAccess().getActorKeyword_3_0_0());
    }
(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getAstEntityAccess().getNameIDTerminalRuleCall_3_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAstEntityAccess().getActorAstActorParserRuleCall_3_0_2_0()); 
	    }
		lv_actor_7_0=ruleAstActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstEntityRule());
	        }
       		set(
       			$current, 
       			"actor",
        		lv_actor_7_0, 
        		"net.sf.orcc.cal.Cal.AstActor");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='unit' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAstEntityAccess().getUnitKeyword_3_1_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getAstEntityAccess().getNameIDTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAstEntityAccess().getUnitAstUnitParserRuleCall_3_1_2_0()); 
	    }
		lv_unit_10_0=ruleAstUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstEntityRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_10_0, 
        		"net.sf.orcc.cal.Cal.AstUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"net.sf.orcc.cal.Cal.QualifiedNameWithWildCard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleAstUnit
entryRuleAstUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstUnitRule()); }
	 iv_ruleAstUnit=ruleAstUnit 
	 { $current=$iv_ruleAstUnit.current; } 
	 EOF 
;

// Rule AstUnit
ruleAstUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstUnitAccess().getAstUnitAction_0(),
            $current);
    }
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstUnitAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstUnitAccess().getFunctionsFunctionParserRuleCall_2_0_0()); 
	    }
		lv_functions_2_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstUnitRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_2_0, 
        		"net.sf.orcc.cal.Cal.Function");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstUnitAccess().getProceduresAstProcedureParserRuleCall_2_1_0()); 
	    }
		lv_procedures_3_0=ruleAstProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstUnitRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_3_0, 
        		"net.sf.orcc.cal.Cal.AstProcedure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstUnitAccess().getVariablesConstantVariableParserRuleCall_2_2_0()); 
	    }
		lv_variables_4_0=ruleConstantVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstUnitRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"net.sf.orcc.cal.Cal.ConstantVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstUnitAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleConstantVariable
entryRuleConstantVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantVariableRule()); }
	 iv_ruleConstantVariable=ruleConstantVariable 
	 { $current=$iv_ruleConstantVariable.current; } 
	 EOF 
;

// Rule ConstantVariable
ruleConstantVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantVariableAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_constant_1_0=	'=' 
    {
        newLeafNode(lv_constant_1_0, grammarAccess.getConstantVariableAccess().getConstantEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantVariableRule());
	        }
       		setWithLastConsumed($current, "constant", true, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantVariableAccess().getValueAstExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantVariableAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAstActor
entryRuleAstActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstActorRule()); }
	 iv_ruleAstActor=ruleAstActor 
	 { $current=$iv_ruleAstActor.current; } 
	 EOF 
;

// Rule AstActor
ruleAstActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstActorAccess().getAstActorAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstActorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getParametersActorParameterParserRuleCall_2_0_0()); 
	    }
		lv_parameters_2_0=ruleActorParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"net.sf.orcc.cal.Cal.ActorParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstActorAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getParametersActorParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_4_0=ruleActorParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"net.sf.orcc.cal.Cal.ActorParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstActorAccess().getRightParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getInputsAstPortParserRuleCall_4_0_0()); 
	    }
		lv_inputs_6_0=ruleAstPort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_6_0, 
        		"net.sf.orcc.cal.Cal.AstPort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAstActorAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getInputsAstPortParserRuleCall_4_1_1_0()); 
	    }
		lv_inputs_8_0=ruleAstPort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_8_0, 
        		"net.sf.orcc.cal.Cal.AstPort");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9='==>' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAstActorAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getOutputsAstPortParserRuleCall_6_0_0()); 
	    }
		lv_outputs_10_0=ruleAstPort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_10_0, 
        		"net.sf.orcc.cal.Cal.AstPort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAstActorAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getOutputsAstPortParserRuleCall_6_1_1_0()); 
	    }
		lv_outputs_12_0=ruleAstPort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_12_0, 
        		"net.sf.orcc.cal.Cal.AstPort");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAstActorAccess().getColonKeyword_7());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getFunctionsFunctionParserRuleCall_8_0_0()); 
	    }
		lv_functions_14_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_14_0, 
        		"net.sf.orcc.cal.Cal.Function");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getProceduresAstProcedureParserRuleCall_8_1_0()); 
	    }
		lv_procedures_15_0=ruleAstProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_15_0, 
        		"net.sf.orcc.cal.Cal.AstProcedure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getActionsAstActionParserRuleCall_8_2_0()); 
	    }
		lv_actions_16_0=ruleAstAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_16_0, 
        		"net.sf.orcc.cal.Cal.AstAction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getInitializesInitializeParserRuleCall_8_3_0()); 
	    }
		lv_initializes_17_0=ruleInitialize		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"initializes",
        		lv_initializes_17_0, 
        		"net.sf.orcc.cal.Cal.Initialize");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getStateVariablesStateVariableParserRuleCall_8_4_0()); 
	    }
		lv_stateVariables_18_0=ruleStateVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"stateVariables",
        		lv_stateVariables_18_0, 
        		"net.sf.orcc.cal.Cal.StateVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getLocalFsmsLocalFsmParserRuleCall_8_5_0()); 
	    }
		lv_localFsms_19_0=ruleLocalFsm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"localFsms",
        		lv_localFsms_19_0, 
        		"net.sf.orcc.cal.Cal.LocalFsm");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getScheduleFsmScheduleFsmParserRuleCall_9_0_0()); 
	    }
		lv_scheduleFsm_20_0=ruleScheduleFsm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		set(
       			$current, 
       			"scheduleFsm",
        		lv_scheduleFsm_20_0, 
        		"net.sf.orcc.cal.Cal.ScheduleFsm");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getScheduleRegExpScheduleRegExpParserRuleCall_9_1_0()); 
	    }
		lv_scheduleRegExp_21_0=ruleScheduleRegExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		set(
       			$current, 
       			"scheduleRegExp",
        		lv_scheduleRegExp_21_0, 
        		"net.sf.orcc.cal.Cal.ScheduleRegExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActorAccess().getPrioritiesPriorityParserRuleCall_10_0()); 
	    }
		lv_priorities_22_0=rulePriority		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActorRule());
	        }
       		add(
       			$current, 
       			"priorities",
        		lv_priorities_22_0, 
        		"net.sf.orcc.cal.Cal.Priority");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_23='end' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getAstActorAccess().getEndKeyword_11());
    }
)
;





// Entry rule entryRuleAstPort
entryRuleAstPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstPortRule()); }
	 iv_ruleAstPort=ruleAstPort 
	 { $current=$iv_ruleAstPort.current; } 
	 EOF 
;

// Rule AstPort
ruleAstPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstPortAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstPortRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAstPortAccess().getTypeAstTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAstType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstPortRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"net.sf.orcc.cal.Cal.AstType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAstPortAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getFunctionKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParametersVariableDeclarationParserRuleCall_4_0_0()); 
	    }
		lv_parameters_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParametersVariableDeclarationParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_6_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='-->' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getTypeAstTypeParserRuleCall_7_0()); 
	    }
		lv_type_9_0=ruleAstType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_9_0, 
        		"net.sf.orcc.cal.Cal.AstType");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_10='var' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionAccess().getVarKeyword_8_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getVariablesValuedVariableDeclarationParserRuleCall_8_0_1_0()); 
	    }
		lv_variables_11_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_11_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionAccess().getCommaKeyword_8_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getVariablesValuedVariableDeclarationParserRuleCall_8_0_2_1_0()); 
	    }
		lv_variables_13_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_13_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_14=':' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunctionAccess().getColonKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExpressionAstExpressionParserRuleCall_8_2_0()); 
	    }
		lv_expression_15_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_15_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_16='end' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFunctionAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleAstProcedure
entryRuleAstProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstProcedureRule()); }
	 iv_ruleAstProcedure=ruleAstProcedure 
	 { $current=$iv_ruleAstProcedure.current; } 
	 EOF 
;

// Rule AstProcedure
ruleAstProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='procedure' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstProcedureAccess().getProcedureKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAstProcedureAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstProcedureAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getParametersVariableDeclarationParserRuleCall_4_0_0()); 
	    }
		lv_parameters_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstProcedureAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getParametersVariableDeclarationParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_6_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAstProcedureAccess().getRightParenthesisKeyword_5());
    }
((	otherlv_8='var' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAstProcedureAccess().getVarKeyword_6_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getVariablesValuedVariableDeclarationParserRuleCall_6_0_1_0()); 
	    }
		lv_variables_9_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_9_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAstProcedureAccess().getCommaKeyword_6_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getVariablesValuedVariableDeclarationParserRuleCall_6_0_2_1_0()); 
	    }
		lv_variables_11_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_11_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='begin' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAstProcedureAccess().getBeginKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstProcedureAccess().getStatementsStatementParserRuleCall_6_2_0()); 
	    }
		lv_statements_13_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstProcedureRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_13_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_14='end' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAstProcedureAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleActorParameter
entryRuleActorParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorParameterRule()); }
	 iv_ruleActorParameter=ruleActorParameter 
	 { $current=$iv_ruleActorParameter.current; } 
	 EOF 
;

// Rule ActorParameter
ruleActorParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActorParameterAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActorParameterAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActorParameterAccess().getValueAstExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStateVariable
entryRuleStateVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateVariableRule()); }
	 iv_ruleStateVariable=ruleStateVariable 
	 { $current=$iv_ruleStateVariable.current; } 
	 EOF 
;

// Rule StateVariable
ruleStateVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateVariableAccess().getValuedVariableDeclarationParserRuleCall_0()); 
    }
    this_ValuedVariableDeclaration_0=ruleValuedVariableDeclaration
    { 
        $current = $this_ValuedVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateVariableAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleAstTag
entryRuleAstTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTagRule()); }
	 iv_ruleAstTag=ruleAstTag 
	 { $current=$iv_ruleAstTag.current; } 
	 EOF 
;

// Rule AstTag
ruleAstTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifiers_0_0=RULE_ID
		{
			newLeafNode(lv_identifiers_0_0, grammarAccess.getAstTagAccess().getIdentifiersIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstTagRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifiers",
        		lv_identifiers_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTagAccess().getFullStopKeyword_1_0());
    }
(
(
		lv_identifiers_2_0=RULE_ID
		{
			newLeafNode(lv_identifiers_2_0, grammarAccess.getAstTagAccess().getIdentifiersIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstTagRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifiers",
        		lv_identifiers_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*)
;





// Entry rule entryRuleInequality
entryRuleInequality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInequalityRule()); }
	 iv_ruleInequality=ruleInequality 
	 { $current=$iv_ruleInequality.current; } 
	 EOF 
;

// Rule Inequality
ruleInequality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInequalityAccess().getTagsAstTagParserRuleCall_0_0()); 
	    }
		lv_tags_0_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInequalityRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_0_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInequalityAccess().getGreaterThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInequalityAccess().getTagsAstTagParserRuleCall_1_1_0()); 
	    }
		lv_tags_2_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInequalityRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_2_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInequalityAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	 iv_rulePriority=rulePriority 
	 { $current=$iv_rulePriority.current; } 
	 EOF 
;

// Rule Priority
rulePriority returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPriorityAccess().getPriorityAction_0(),
            $current);
    }
)	otherlv_1='priority' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPriorityAccess().getPriorityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPriorityAccess().getInequalitiesInequalityParserRuleCall_2_0()); 
	    }
		lv_inequalities_2_0=ruleInequality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPriorityRule());
	        }
       		add(
       			$current, 
       			"inequalities",
        		lv_inequalities_2_0, 
        		"net.sf.orcc.cal.Cal.Inequality");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPriorityAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleScheduleFsm
entryRuleScheduleFsm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScheduleFsmRule()); }
	 iv_ruleScheduleFsm=ruleScheduleFsm 
	 { $current=$iv_ruleScheduleFsm.current; } 
	 EOF 
;

// Rule ScheduleFsm
ruleScheduleFsm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schedule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScheduleFsmAccess().getScheduleKeyword_0());
    }
	otherlv_1='fsm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScheduleFsmAccess().getFsmKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScheduleFsmRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getScheduleFsmAccess().getInitialStateAstStateCrossReference_2_0()); 
	}

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScheduleFsmAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScheduleFsmAccess().getContentsFsmParserRuleCall_4_0()); 
	    }
		lv_contents_4_0=ruleFsm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScheduleFsmRule());
	        }
       		set(
       			$current, 
       			"contents",
        		lv_contents_4_0, 
        		"net.sf.orcc.cal.Cal.Fsm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScheduleFsmAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleFsm
entryRuleFsm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFsmRule()); }
	 iv_ruleFsm=ruleFsm 
	 { $current=$iv_ruleFsm.current; } 
	 EOF 
;

// Rule Fsm
ruleFsm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFsmAccess().getFsmAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFsmAccess().getTransitionsAstTransitionParserRuleCall_1_0()); 
	    }
		lv_transitions_1_0=ruleAstTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFsmRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_1_0, 
        		"net.sf.orcc.cal.Cal.AstTransition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAstTransition
entryRuleAstTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTransitionRule()); }
	 iv_ruleAstTransition=ruleAstTransition 
	 { $current=$iv_ruleAstTransition.current; } 
	 EOF 
;

// Rule AstTransition
ruleAstTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstTransitionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAstTransitionAccess().getSourceAstStateCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTransitionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTransitionAccess().getTagAstTagParserRuleCall_2_0()); 
	    }
		lv_tag_2_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTransitionRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_2_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstTransitionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='-->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAstTransitionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_4());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstTransitionRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getAstTransitionAccess().getTargetAstStateCrossReference_5_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTransitionAccess().getExternalTargetExternalTargetParserRuleCall_5_1_0()); 
	    }
		lv_externalTarget_6_0=ruleExternalTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTransitionRule());
	        }
       		set(
       			$current, 
       			"externalTarget",
        		lv_externalTarget_6_0, 
        		"net.sf.orcc.cal.Cal.ExternalTarget");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAstTransitionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleExternalTarget
entryRuleExternalTarget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalTargetRule()); }
	 iv_ruleExternalTarget=ruleExternalTarget 
	 { $current=$iv_ruleExternalTarget.current; } 
	 EOF 
;

// Rule ExternalTarget
ruleExternalTarget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalTargetRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getExternalTargetAccess().getFsmLocalFsmCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExternalTargetAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalTargetRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExternalTargetAccess().getStateAstStateCrossReference_2_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExternalTargetAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalTargetRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExternalTargetAccess().getFromAstStateCrossReference_4_0()); 
	}

)
)	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExternalTargetAccess().getEqualsSignGreaterThanSignKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalTargetRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getExternalTargetAccess().getToAstStateCrossReference_6_0()); 
	}

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExternalTargetAccess().getRightParenthesisKeyword_7());
    }
)
;







// Entry rule entryRuleScheduleRegExp
entryRuleScheduleRegExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScheduleRegExpRule()); }
	 iv_ruleScheduleRegExp=ruleScheduleRegExp 
	 { $current=$iv_ruleScheduleRegExp.current; } 
	 EOF 
;

// Rule ScheduleRegExp
ruleScheduleRegExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schedule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScheduleRegExpAccess().getScheduleKeyword_0());
    }
	otherlv_1='regexp' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScheduleRegExpAccess().getRegexpKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScheduleRegExpAccess().getExpRegExpParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleRegExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScheduleRegExpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"net.sf.orcc.cal.Cal.RegExp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScheduleRegExpAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleRegExp
entryRuleRegExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegExpRule()); }
	 iv_ruleRegExp=ruleRegExp 
	 { $current=$iv_ruleRegExp.current; } 
	 EOF 
;

// Rule RegExp
ruleRegExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRegExpAccess().getRegExpConcatenationParserRuleCall_0()); 
    }
    this_RegExpConcatenation_0=ruleRegExpConcatenation
    { 
        $current = $this_RegExpConcatenation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRegExpAccess().getRegExpBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'|' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getRegExpAccess().getOperatorVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegExpRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRegExpAccess().getRightRegExpConcatenationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRegExpConcatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.RegExpConcatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRegExpConcatenation
entryRuleRegExpConcatenation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegExpConcatenationRule()); }
	 iv_ruleRegExpConcatenation=ruleRegExpConcatenation 
	 { $current=$iv_ruleRegExpConcatenation.current; } 
	 EOF 
;

// Rule RegExpConcatenation
ruleRegExpConcatenation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRegExpConcatenationAccess().getRegExpPostfixParserRuleCall_0()); 
    }
    this_RegExpPostfix_0=ruleRegExpPostfix
    { 
        $current = $this_RegExpPostfix_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRegExpConcatenationAccess().getRegExpBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRegExpConcatenationAccess().getRightRegExpPostfixParserRuleCall_1_1_0()); 
	    }
		lv_right_2_0=ruleRegExpPostfix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegExpConcatenationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"net.sf.orcc.cal.Cal.RegExpPostfix");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRegExpPostfix
entryRuleRegExpPostfix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegExpPostfixRule()); }
	 iv_ruleRegExpPostfix=ruleRegExpPostfix 
	 { $current=$iv_ruleRegExpPostfix.current; } 
	 EOF 
;

// Rule RegExpPostfix
ruleRegExpPostfix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRegExpPostfixAccess().getRegExpGroupingParserRuleCall_0()); 
    }
    this_RegExpGrouping_0=ruleRegExpGrouping
    { 
        $current = $this_RegExpGrouping_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRegExpPostfixAccess().getRegExpUnaryChildAction_1_0(),
            $current);
    }
)(
(
(
		lv_unaryOperator_2_1=	'*' 
    {
        newLeafNode(lv_unaryOperator_2_1, grammarAccess.getRegExpPostfixAccess().getUnaryOperatorAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegExpPostfixRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_2_1, null);
	    }

    |		lv_unaryOperator_2_2=	'?' 
    {
        newLeafNode(lv_unaryOperator_2_2, grammarAccess.getRegExpPostfixAccess().getUnaryOperatorQuestionMarkKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegExpPostfixRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_2_2, null);
	    }

)

)
))*)
;





// Entry rule entryRuleRegExpGrouping
entryRuleRegExpGrouping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegExpGroupingRule()); }
	 iv_ruleRegExpGrouping=ruleRegExpGrouping 
	 { $current=$iv_ruleRegExpGrouping.current; } 
	 EOF 
;

// Rule RegExpGrouping
ruleRegExpGrouping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRegExpGroupingAccess().getRegExpTerminalParserRuleCall_0()); 
    }
    this_RegExpTerminal_0=ruleRegExpTerminal
    { 
        $current = $this_RegExpTerminal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRegExpGroupingAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getRegExpGroupingAccess().getRegExpParserRuleCall_1_1()); 
    }
    this_RegExp_2=ruleRegExp
    { 
        $current = $this_RegExp_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRegExpGroupingAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleRegExpTerminal
entryRuleRegExpTerminal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegExpTerminalRule()); }
	 iv_ruleRegExpTerminal=ruleRegExpTerminal 
	 { $current=$iv_ruleRegExpTerminal.current; } 
	 EOF 
;

// Rule RegExpTerminal
ruleRegExpTerminal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegExpTerminalAccess().getRegExpTagAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRegExpTerminalAccess().getTagAstTagParserRuleCall_1_0()); 
	    }
		lv_tag_1_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegExpTerminalRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_1_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalFsm
entryRuleLocalFsm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalFsmRule()); }
	 iv_ruleLocalFsm=ruleLocalFsm 
	 { $current=$iv_ruleLocalFsm.current; } 
	 EOF 
;

// Rule LocalFsm
ruleLocalFsm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='local' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalFsmAccess().getLocalKeyword_0());
    }
	otherlv_1='fsm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalFsmAccess().getFsmKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLocalFsmAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalFsmRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalFsmAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalFsmAccess().getContentsFsmParserRuleCall_4_0()); 
	    }
		lv_contents_4_0=ruleFsm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalFsmRule());
	        }
       		set(
       			$current, 
       			"contents",
        		lv_contents_4_0, 
        		"net.sf.orcc.cal.Cal.Fsm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalFsmAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleAstAction
entryRuleAstAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstActionRule()); }
	 iv_ruleAstAction=ruleAstAction 
	 { $current=$iv_ruleAstAction.current; } 
	 EOF 
;

// Rule AstAction
ruleAstAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstActionAccess().getAstActionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getAnnotationsAstAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getTagAstTagParserRuleCall_2_0_0()); 
	    }
		lv_tag_2_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_2_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstActionAccess().getColonKeyword_2_1());
    }
)?	otherlv_4='action' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAstActionAccess().getActionKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getInputsInputPatternParserRuleCall_4_0_0()); 
	    }
		lv_inputs_5_0=ruleInputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_5_0, 
        		"net.sf.orcc.cal.Cal.InputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstActionAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getInputsInputPatternParserRuleCall_4_1_1_0()); 
	    }
		lv_inputs_7_0=ruleInputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_7_0, 
        		"net.sf.orcc.cal.Cal.InputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8='==>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAstActionAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getOutputsOutputPatternParserRuleCall_6_0_0()); 
	    }
		lv_outputs_9_0=ruleOutputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_9_0, 
        		"net.sf.orcc.cal.Cal.OutputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAstActionAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getOutputsOutputPatternParserRuleCall_6_1_1_0()); 
	    }
		lv_outputs_11_0=ruleOutputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_11_0, 
        		"net.sf.orcc.cal.Cal.OutputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_12='guard' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAstActionAccess().getGuardKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getGuardGuardParserRuleCall_7_1_0()); 
	    }
		lv_guard_13_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_13_0, 
        		"net.sf.orcc.cal.Cal.Guard");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14='var' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAstActionAccess().getVarKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getVariablesValuedVariableDeclarationParserRuleCall_8_1_0()); 
	    }
		lv_variables_15_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_15_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAstActionAccess().getCommaKeyword_8_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getVariablesValuedVariableDeclarationParserRuleCall_8_2_1_0()); 
	    }
		lv_variables_17_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_17_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_18='do' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getAstActionAccess().getDoKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstActionAccess().getStatementsStatementParserRuleCall_9_1_0()); 
	    }
		lv_statements_19_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstActionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_19_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getAstActionAccess().getEndKeyword_10());
    }
)
;





// Entry rule entryRuleInitialize
entryRuleInitialize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializeRule()); }
	 iv_ruleInitialize=ruleInitialize 
	 { $current=$iv_ruleInitialize.current; } 
	 EOF 
;

// Rule Initialize
ruleInitialize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInitializeAccess().getAstActionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getAnnotationsAstAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getTagAstTagParserRuleCall_2_0_0()); 
	    }
		lv_tag_2_0=ruleAstTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_2_0, 
        		"net.sf.orcc.cal.Cal.AstTag");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInitializeAccess().getColonKeyword_2_1());
    }
)?	otherlv_4='initialize' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInitializeAccess().getInitializeKeyword_3());
    }
	otherlv_5='==>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInitializeAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getOutputsOutputPatternParserRuleCall_5_0_0()); 
	    }
		lv_outputs_6_0=ruleOutputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_6_0, 
        		"net.sf.orcc.cal.Cal.OutputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInitializeAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getOutputsOutputPatternParserRuleCall_5_1_1_0()); 
	    }
		lv_outputs_8_0=ruleOutputPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_8_0, 
        		"net.sf.orcc.cal.Cal.OutputPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_9='guard' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInitializeAccess().getGuardKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getGuardGuardParserRuleCall_6_1_0()); 
	    }
		lv_guard_10_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_10_0, 
        		"net.sf.orcc.cal.Cal.Guard");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='var' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInitializeAccess().getVarKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getVariablesValuedVariableDeclarationParserRuleCall_7_1_0()); 
	    }
		lv_variables_12_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_12_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInitializeAccess().getCommaKeyword_7_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getVariablesValuedVariableDeclarationParserRuleCall_7_2_1_0()); 
	    }
		lv_variables_14_0=ruleValuedVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_14_0, 
        		"net.sf.orcc.cal.Cal.ValuedVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_15='do' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInitializeAccess().getDoKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializeAccess().getStatementsStatementParserRuleCall_8_1_0()); 
	    }
		lv_statements_16_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializeRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_16_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_17='end' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInitializeAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleToken
entryRuleToken returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current; } 
	 EOF 
;

// Rule Token
ruleToken returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleInputPattern
entryRuleInputPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputPatternRule()); }
	 iv_ruleInputPattern=ruleInputPattern 
	 { $current=$iv_ruleInputPattern.current; } 
	 EOF 
;

// Rule InputPattern
ruleInputPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputPatternRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getInputPatternAccess().getPortAstPortCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputPatternAccess().getColonKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputPatternAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputPatternAccess().getTokensTokenParserRuleCall_3_0()); 
	    }
		lv_tokens_3_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputPatternRule());
	        }
       		add(
       			$current, 
       			"tokens",
        		lv_tokens_3_0, 
        		"net.sf.orcc.cal.Cal.Token");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInputPatternAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputPatternAccess().getTokensTokenParserRuleCall_4_1_0()); 
	    }
		lv_tokens_5_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputPatternRule());
	        }
       		add(
       			$current, 
       			"tokens",
        		lv_tokens_5_0, 
        		"net.sf.orcc.cal.Cal.Token");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInputPatternAccess().getRightSquareBracketKeyword_5());
    }
(	otherlv_7='repeat' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInputPatternAccess().getRepeatKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputPatternAccess().getRepeatAstExpressionParserRuleCall_6_1_0()); 
	    }
		lv_repeat_8_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputPatternRule());
	        }
       		set(
       			$current, 
       			"repeat",
        		lv_repeat_8_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOutputPattern
entryRuleOutputPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputPatternRule()); }
	 iv_ruleOutputPattern=ruleOutputPattern 
	 { $current=$iv_ruleOutputPattern.current; } 
	 EOF 
;

// Rule OutputPattern
ruleOutputPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputPatternRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOutputPatternAccess().getPortAstPortCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputPatternAccess().getColonKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutputPatternAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputPatternAccess().getValuesAstExpressionParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputPatternRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOutputPatternAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputPatternAccess().getValuesAstExpressionParserRuleCall_4_1_0()); 
	    }
		lv_values_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputPatternRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOutputPatternAccess().getRightSquareBracketKeyword_5());
    }
(	otherlv_7='repeat' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOutputPatternAccess().getRepeatKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputPatternAccess().getRepeatAstExpressionParserRuleCall_6_1_0()); 
	    }
		lv_repeat_8_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputPatternRule());
	        }
       		set(
       			$current, 
       			"repeat",
        		lv_repeat_8_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGuardAccess().getGuardAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardAccess().getExpressionsAstExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGuardAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardAccess().getExpressionsAstExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStatementAssign
entryRuleStatementAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementAssignRule()); }
	 iv_ruleStatementAssign=ruleStatementAssign 
	 { $current=$iv_ruleStatementAssign.current; } 
	 EOF 
;

// Rule StatementAssign
ruleStatementAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAssignAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementAssignRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAssignAccess().getTargetVariableReferenceParserRuleCall_1_0()); 
	    }
		lv_target_1_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementAssignRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_1_0, 
        		"net.sf.orcc.cal.Cal.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAssignAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAssignAccess().getIndexesAstExpressionParserRuleCall_2_1_0()); 
	    }
		lv_indexes_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementAssignRule());
	        }
       		add(
       			$current, 
       			"indexes",
        		lv_indexes_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAssignAccess().getRightSquareBracketKeyword_2_2());
    }
)*	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementAssignAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAssignAccess().getValueAstExpressionParserRuleCall_4_0()); 
	    }
		lv_value_6_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementAssignRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementAssignAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleStatementCall
entryRuleStatementCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementCallRule()); }
	 iv_ruleStatementCall=ruleStatementCall 
	 { $current=$iv_ruleStatementCall.current; } 
	 EOF 
;

// Rule StatementCall
ruleStatementCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementCallAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementCallRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStatementCallAccess().getProcedureAstProcedureCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementCallAccess().getArgumentsAstExpressionParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementCallAccess().getArgumentsAstExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementCallAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementCallAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleStatementForeach
entryRuleStatementForeach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementForeachRule()); }
	 iv_ruleStatementForeach=ruleStatementForeach 
	 { $current=$iv_ruleStatementForeach.current; } 
	 EOF 
;

// Rule StatementForeach
ruleStatementForeach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementForeachAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementForeachRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='foreach' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementForeachAccess().getForeachKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementForeachRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementForeachAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementForeachAccess().getLowerAstExpressionParserRuleCall_4_0()); 
	    }
		lv_lower_4_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementForeachRule());
	        }
       		set(
       			$current, 
       			"lower",
        		lv_lower_4_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='..' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementForeachAccess().getFullStopFullStopKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementForeachAccess().getHigherAstExpressionParserRuleCall_6_0()); 
	    }
		lv_higher_6_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementForeachRule());
	        }
       		set(
       			$current, 
       			"higher",
        		lv_higher_6_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='do' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementForeachAccess().getDoKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementForeachAccess().getStatementsStatementParserRuleCall_8_0()); 
	    }
		lv_statements_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementForeachRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='end' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatementForeachAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleStatementIf
entryRuleStatementIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementIfRule()); }
	 iv_ruleStatementIf=ruleStatementIf 
	 { $current=$iv_ruleStatementIf.current; } 
	 EOF 
;

// Rule StatementIf
ruleStatementIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementIfAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementIfRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementIfAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementIfAccess().getConditionAstExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementIfRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementIfAccess().getThenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementIfAccess().getThenStatementParserRuleCall_4_0()); 
	    }
		lv_then_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementIfRule());
	        }
       		add(
       			$current, 
       			"then",
        		lv_then_4_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementIfAccess().getElsifsStatementElsifParserRuleCall_5_0()); 
	    }
		lv_elsifs_5_0=ruleStatementElsif		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementIfRule());
	        }
       		add(
       			$current, 
       			"elsifs",
        		lv_elsifs_5_0, 
        		"net.sf.orcc.cal.Cal.StatementElsif");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementIfAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementIfAccess().getElseStatementParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementIfRule());
	        }
       		add(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementIfAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleStatementElsif
entryRuleStatementElsif returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementElsifRule()); }
	 iv_ruleStatementElsif=ruleStatementElsif 
	 { $current=$iv_ruleStatementElsif.current; } 
	 EOF 
;

// Rule StatementElsif
ruleStatementElsif returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elsif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementElsifAccess().getElsifKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementElsifAccess().getConditionAstExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementElsifRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementElsifAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementElsifAccess().getThenStatementParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementElsifRule());
	        }
       		add(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStatementWhile
entryRuleStatementWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementWhileRule()); }
	 iv_ruleStatementWhile=ruleStatementWhile 
	 { $current=$iv_ruleStatementWhile.current; } 
	 EOF 
;

// Rule StatementWhile
ruleStatementWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementWhileAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementWhileRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementWhileAccess().getWhileKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementWhileAccess().getConditionAstExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementWhileRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='do' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementWhileAccess().getDoKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementWhileAccess().getStatementsStatementParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementWhileRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"net.sf.orcc.cal.Cal.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementWhileAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementAssignParserRuleCall_0()); 
    }
    this_StatementAssign_0=ruleStatementAssign
    { 
        $current = $this_StatementAssign_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementCallParserRuleCall_1()); 
    }
    this_StatementCall_1=ruleStatementCall
    { 
        $current = $this_StatementCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementForeachParserRuleCall_2()); 
    }
    this_StatementForeach_2=ruleStatementForeach
    { 
        $current = $this_StatementForeach_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementIfParserRuleCall_3()); 
    }
    this_StatementIf_3=ruleStatementIf
    { 
        $current = $this_StatementIf_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementWhileParserRuleCall_4()); 
    }
    this_StatementWhile_4=ruleStatementWhile
    { 
        $current = $this_StatementWhile_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAstExpression
entryRuleAstExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstExpressionRule()); }
	 iv_ruleAstExpression=ruleAstExpression 
	 { $current=$iv_ruleAstExpression.current; } 
	 EOF 
;

// Rule AstExpression
ruleAstExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAstExpressionAccess().getExpressionAndParserRuleCall_0()); 
    }
    this_ExpressionAnd_0=ruleExpressionAnd
    { 
        $current = $this_ExpressionAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAstExpressionAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'||' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'or' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionAccess().getOperatorOrKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAstExpressionAccess().getRightExpressionAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionAnd
entryRuleExpressionAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionAndRule()); }
	 iv_ruleExpressionAnd=ruleExpressionAnd 
	 { $current=$iv_ruleExpressionAnd.current; } 
	 EOF 
;

// Rule ExpressionAnd
ruleExpressionAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAndAccess().getExpressionBitorParserRuleCall_0()); 
    }
    this_ExpressionBitor_0=ruleExpressionBitor
    { 
        $current = $this_ExpressionBitor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAndAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'&&' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionAndAccess().getOperatorAmpersandAmpersandKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionAndRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'and' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionAndAccess().getOperatorAndKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionAndRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAndAccess().getRightExpressionBitorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionBitor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionBitor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionBitor
entryRuleExpressionBitor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionBitorRule()); }
	 iv_ruleExpressionBitor=ruleExpressionBitor 
	 { $current=$iv_ruleExpressionBitor.current; } 
	 EOF 
;

// Rule ExpressionBitor
ruleExpressionBitor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionBitorAccess().getExpressionBitxorParserRuleCall_0()); 
    }
    this_ExpressionBitxor_0=ruleExpressionBitxor
    { 
        $current = $this_ExpressionBitxor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionBitorAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'|' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getExpressionBitorAccess().getOperatorVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionBitorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionBitorAccess().getRightExpressionBitxorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionBitxor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionBitorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionBitxor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionBitxor
entryRuleExpressionBitxor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionBitxorRule()); }
	 iv_ruleExpressionBitxor=ruleExpressionBitxor 
	 { $current=$iv_ruleExpressionBitxor.current; } 
	 EOF 
;

// Rule ExpressionBitxor
ruleExpressionBitxor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionBitxorAccess().getExpressionBitandParserRuleCall_0()); 
    }
    this_ExpressionBitand_0=ruleExpressionBitand
    { 
        $current = $this_ExpressionBitand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionBitxorAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'^' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getExpressionBitxorAccess().getOperatorCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionBitxorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionBitxorAccess().getRightExpressionBitandParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionBitand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionBitxorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionBitand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionBitand
entryRuleExpressionBitand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionBitandRule()); }
	 iv_ruleExpressionBitand=ruleExpressionBitand 
	 { $current=$iv_ruleExpressionBitand.current; } 
	 EOF 
;

// Rule ExpressionBitand
ruleExpressionBitand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionBitandAccess().getExpressionEqParserRuleCall_0()); 
    }
    this_ExpressionEq_0=ruleExpressionEq
    { 
        $current = $this_ExpressionEq_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionBitandAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'&' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getExpressionBitandAccess().getOperatorAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionBitandRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionBitandAccess().getRightExpressionEqParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionEq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionBitandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionEq");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionEq
entryRuleExpressionEq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionEqRule()); }
	 iv_ruleExpressionEq=ruleExpressionEq 
	 { $current=$iv_ruleExpressionEq.current; } 
	 EOF 
;

// Rule ExpressionEq
ruleExpressionEq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionEqAccess().getExpressionRelationalParserRuleCall_0()); 
    }
    this_ExpressionRelational_0=ruleExpressionRelational
    { 
        $current = $this_ExpressionRelational_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionEqAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'=' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionEqAccess().getOperatorEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionEqRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'!=' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionEqAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionEqRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionEqAccess().getRightExpressionRelationalParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionEqRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionRelational");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionRelational
entryRuleExpressionRelational returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRelationalRule()); }
	 iv_ruleExpressionRelational=ruleExpressionRelational 
	 { $current=$iv_ruleExpressionRelational.current; } 
	 EOF 
;

// Rule ExpressionRelational
ruleExpressionRelational returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionRelationalAccess().getExpressionShiftParserRuleCall_0()); 
    }
    this_ExpressionShift_0=ruleExpressionShift
    { 
        $current = $this_ExpressionShift_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionRelationalAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'<' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionRelationalAccess().getOperatorLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRelationalRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'<=' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionRelationalAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRelationalRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'>' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getExpressionRelationalAccess().getOperatorGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRelationalRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=	'>=' 
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getExpressionRelationalAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRelationalRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionRelationalAccess().getRightExpressionShiftParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionShift		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRelationalRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionShift");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionShift
entryRuleExpressionShift returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionShiftRule()); }
	 iv_ruleExpressionShift=ruleExpressionShift 
	 { $current=$iv_ruleExpressionShift.current; } 
	 EOF 
;

// Rule ExpressionShift
ruleExpressionShift returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionShiftAccess().getExpressionAdditiveParserRuleCall_0()); 
    }
    this_ExpressionAdditive_0=ruleExpressionAdditive
    { 
        $current = $this_ExpressionAdditive_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionShiftAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'<<' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionShiftAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionShiftRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'>>' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionShiftAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionShiftRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionShiftAccess().getRightExpressionAdditiveParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionAdditive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionShiftRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionAdditive");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionAdditive
entryRuleExpressionAdditive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionAdditiveRule()); }
	 iv_ruleExpressionAdditive=ruleExpressionAdditive 
	 { $current=$iv_ruleExpressionAdditive.current; } 
	 EOF 
;

// Rule ExpressionAdditive
ruleExpressionAdditive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAdditiveAccess().getExpressionMultiplicativeParserRuleCall_0()); 
    }
    this_ExpressionMultiplicative_0=ruleExpressionMultiplicative
    { 
        $current = $this_ExpressionMultiplicative_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAdditiveAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'+' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionAdditiveAccess().getOperatorPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionAdditiveRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'-' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionAdditiveAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionAdditiveRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAdditiveAccess().getRightExpressionMultiplicativeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionMultiplicative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionAdditiveRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionMultiplicative");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionMultiplicative
entryRuleExpressionMultiplicative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionMultiplicativeRule()); }
	 iv_ruleExpressionMultiplicative=ruleExpressionMultiplicative 
	 { $current=$iv_ruleExpressionMultiplicative.current; } 
	 EOF 
;

// Rule ExpressionMultiplicative
ruleExpressionMultiplicative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionMultiplicativeAccess().getExpressionExpParserRuleCall_0()); 
    }
    this_ExpressionExp_0=ruleExpressionExp
    { 
        $current = $this_ExpressionExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionMultiplicativeAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'*' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getExpressionMultiplicativeAccess().getOperatorAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionMultiplicativeRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'/' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getExpressionMultiplicativeAccess().getOperatorSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionMultiplicativeRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'div' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getExpressionMultiplicativeAccess().getOperatorDivKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionMultiplicativeRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=	'mod' 
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getExpressionMultiplicativeAccess().getOperatorModKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionMultiplicativeRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionMultiplicativeAccess().getRightExpressionExpParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionMultiplicativeRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionExp
entryRuleExpressionExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionExpRule()); }
	 iv_ruleExpressionExp=ruleExpressionExp 
	 { $current=$iv_ruleExpressionExp.current; } 
	 EOF 
;

// Rule ExpressionExp
ruleExpressionExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionExpAccess().getExpressionUnaryParserRuleCall_0()); 
    }
    this_ExpressionUnary_0=ruleExpressionUnary
    { 
        $current = $this_ExpressionUnary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionExpAccess().getExpressionBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'**' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getExpressionExpAccess().getOperatorAsteriskAsteriskKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionExpRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "**");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionExpAccess().getRightExpressionUnaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpressionUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.sf.orcc.cal.Cal.ExpressionUnary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressionUnary
entryRuleExpressionUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionUnaryRule()); }
	 iv_ruleExpressionUnary=ruleExpressionUnary 
	 { $current=$iv_ruleExpressionUnary.current; } 
	 EOF 
;

// Rule ExpressionUnary
ruleExpressionUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionUnaryAccess().getExpressionUnaryAction_0_0(),
            $current);
    }
)(
(
(
		lv_unaryOperator_1_1=	'~' 
    {
        newLeafNode(lv_unaryOperator_1_1, grammarAccess.getExpressionUnaryAccess().getUnaryOperatorTildeKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionUnaryRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_1, null);
	    }

    |		lv_unaryOperator_1_2=	'not' 
    {
        newLeafNode(lv_unaryOperator_1_2, grammarAccess.getExpressionUnaryAccess().getUnaryOperatorNotKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionUnaryRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_2, null);
	    }

    |		lv_unaryOperator_1_3=	'-' 
    {
        newLeafNode(lv_unaryOperator_1_3, grammarAccess.getExpressionUnaryAccess().getUnaryOperatorHyphenMinusKeyword_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionUnaryRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_3, null);
	    }

    |		lv_unaryOperator_1_4=	'#' 
    {
        newLeafNode(lv_unaryOperator_1_4, grammarAccess.getExpressionUnaryAccess().getUnaryOperatorNumberSignKeyword_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionUnaryRule());
	        }
       		setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionUnaryAccess().getExpressionExpressionPostfixParserRuleCall_0_2_0()); 
	    }
		lv_expression_2_0=ruleExpressionPostfix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionUnaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"net.sf.orcc.cal.Cal.ExpressionPostfix");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getExpressionUnaryAccess().getExpressionPostfixParserRuleCall_1()); 
    }
    this_ExpressionPostfix_3=ruleExpressionPostfix
    { 
        $current = $this_ExpressionPostfix_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionPostfix
entryRuleExpressionPostfix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionPostfixRule()); }
	 iv_ruleExpressionPostfix=ruleExpressionPostfix 
	 { $current=$iv_ruleExpressionPostfix.current; } 
	 EOF 
;

// Rule ExpressionPostfix
ruleExpressionPostfix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionListParserRuleCall_0()); 
    }
    this_ExpressionList_0=ruleExpressionList
    { 
        $current = $this_ExpressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionCallParserRuleCall_1()); 
    }
    this_ExpressionCall_1=ruleExpressionCall
    { 
        $current = $this_ExpressionCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionIndexParserRuleCall_2()); 
    }
    this_ExpressionIndex_2=ruleExpressionIndex
    { 
        $current = $this_ExpressionIndex_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionIfParserRuleCall_3()); 
    }
    this_ExpressionIf_3=ruleExpressionIf
    { 
        $current = $this_ExpressionIf_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionLiteralParserRuleCall_4()); 
    }
    this_ExpressionLiteral_4=ruleExpressionLiteral
    { 
        $current = $this_ExpressionLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getExpressionVariableParserRuleCall_5()); 
    }
    this_ExpressionVariable_5=ruleExpressionVariable
    { 
        $current = $this_ExpressionVariable_5.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpressionPostfixAccess().getLeftParenthesisKeyword_6_0());
    }

    { 
        newCompositeNode(grammarAccess.getExpressionPostfixAccess().getAstExpressionParserRuleCall_6_1()); 
    }
    this_AstExpression_7=ruleAstExpression
    { 
        $current = $this_AstExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpressionPostfixAccess().getRightParenthesisKeyword_6_2());
    }
))
;





// Entry rule entryRuleExpressionCall
entryRuleExpressionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionCallRule()); }
	 iv_ruleExpressionCall=ruleExpressionCall 
	 { $current=$iv_ruleExpressionCall.current; } 
	 EOF 
;

// Rule ExpressionCall
ruleExpressionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionCallAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionCallRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExpressionCallAccess().getFunctionFunctionCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionCallAccess().getParametersAstExpressionParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionCallAccess().getParametersAstExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_parameters_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpressionCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleExpressionIndex
entryRuleExpressionIndex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionIndexRule()); }
	 iv_ruleExpressionIndex=ruleExpressionIndex 
	 { $current=$iv_ruleExpressionIndex.current; } 
	 EOF 
;

// Rule ExpressionIndex
ruleExpressionIndex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIndexAccess().getSourceVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIndexRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"net.sf.orcc.cal.Cal.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionIndexAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIndexAccess().getIndexesAstExpressionParserRuleCall_1_1_0()); 
	    }
		lv_indexes_2_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIndexRule());
	        }
       		add(
       			$current, 
       			"indexes",
        		lv_indexes_2_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionIndexAccess().getRightSquareBracketKeyword_1_2());
    }
)+)
;





// Entry rule entryRuleExpressionIf
entryRuleExpressionIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionIfRule()); }
	 iv_ruleExpressionIf=ruleExpressionIf 
	 { $current=$iv_ruleExpressionIf.current; } 
	 EOF 
;

// Rule ExpressionIf
ruleExpressionIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionIfAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIfAccess().getConditionAstExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIfRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionIfAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIfAccess().getThenAstExpressionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIfRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIfAccess().getElsifsExpressionElsifParserRuleCall_4_0()); 
	    }
		lv_elsifs_4_0=ruleExpressionElsif		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIfRule());
	        }
       		add(
       			$current, 
       			"elsifs",
        		lv_elsifs_4_0, 
        		"net.sf.orcc.cal.Cal.ExpressionElsif");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionIfAccess().getElseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionIfAccess().getElseAstExpressionParserRuleCall_6_0()); 
	    }
		lv_else_6_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionIfRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpressionIfAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleExpressionElsif
entryRuleExpressionElsif returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionElsifRule()); }
	 iv_ruleExpressionElsif=ruleExpressionElsif 
	 { $current=$iv_ruleExpressionElsif.current; } 
	 EOF 
;

// Rule ExpressionElsif
ruleExpressionElsif returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elsif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionElsifAccess().getElsifKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionElsifAccess().getConditionAstExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionElsifRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionElsifAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionElsifAccess().getThenAstExpressionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionElsifRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsAstExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsAstExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionListAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getGeneratorsGeneratorParserRuleCall_3_1_0()); 
	    }
		lv_generators_5_0=ruleGenerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_5_0, 
        		"net.sf.orcc.cal.Cal.Generator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpressionListAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getGeneratorsGeneratorParserRuleCall_3_2_1_0()); 
	    }
		lv_generators_7_0=ruleGenerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_7_0, 
        		"net.sf.orcc.cal.Cal.Generator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpressionListAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleGenerator
entryRuleGenerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneratorRule()); }
	 iv_ruleGenerator=ruleGenerator 
	 { $current=$iv_ruleGenerator.current; } 
	 EOF 
;

// Rule Generator
ruleGenerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGeneratorAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"net.sf.orcc.cal.Cal.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGeneratorAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getLowerAstExpressionParserRuleCall_3_0()); 
	    }
		lv_lower_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"lower",
        		lv_lower_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='..' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGeneratorAccess().getFullStopFullStopKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getHigherAstExpressionParserRuleCall_5_0()); 
	    }
		lv_higher_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"higher",
        		lv_higher_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionVariable
entryRuleExpressionVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionVariableRule()); }
	 iv_ruleExpressionVariable=ruleExpressionVariable 
	 { $current=$iv_ruleExpressionVariable.current; } 
	 EOF 
;

// Rule ExpressionVariable
ruleExpressionVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionVariableAccess().getValueVariableReferenceParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"net.sf.orcc.cal.Cal.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpressionLiteral
entryRuleExpressionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionLiteralRule()); }
	 iv_ruleExpressionLiteral=ruleExpressionLiteral 
	 { $current=$iv_ruleExpressionLiteral.current; } 
	 EOF 
;

// Rule ExpressionLiteral
ruleExpressionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionLiteralAccess().getExpressionBooleanParserRuleCall_0()); 
    }
    this_ExpressionBoolean_0=ruleExpressionBoolean
    { 
        $current = $this_ExpressionBoolean_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionLiteralAccess().getExpressionFloatParserRuleCall_1()); 
    }
    this_ExpressionFloat_1=ruleExpressionFloat
    { 
        $current = $this_ExpressionFloat_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionLiteralAccess().getExpressionIntegerParserRuleCall_2()); 
    }
    this_ExpressionInteger_2=ruleExpressionInteger
    { 
        $current = $this_ExpressionInteger_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionLiteralAccess().getExpressionStringParserRuleCall_3()); 
    }
    this_ExpressionString_3=ruleExpressionString
    { 
        $current = $this_ExpressionString_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionBoolean
entryRuleExpressionBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionBooleanRule()); }
	 iv_ruleExpressionBoolean=ruleExpressionBoolean 
	 { $current=$iv_ruleExpressionBoolean.current; } 
	 EOF 
;

// Rule ExpressionBoolean
ruleExpressionBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionBooleanAccess().getValueBOOLParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionBooleanRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"net.sf.orcc.cal.Cal.BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleExpressionFloat
entryRuleExpressionFloat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionFloatRule()); }
	 iv_ruleExpressionFloat=ruleExpressionFloat 
	 { $current=$iv_ruleExpressionFloat.current; } 
	 EOF 
;

// Rule ExpressionFloat
ruleExpressionFloat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getExpressionFloatAccess().getValueREALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionFloatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"net.sf.orcc.cal.Cal.REAL");
	    }

)
)
;





// Entry rule entryRuleExpressionInteger
entryRuleExpressionInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionIntegerRule()); }
	 iv_ruleExpressionInteger=ruleExpressionInteger 
	 { $current=$iv_ruleExpressionInteger.current; } 
	 EOF 
;

// Rule ExpressionInteger
ruleExpressionInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=RULE_DECIMAL
		{
			newLeafNode(lv_value_0_1, grammarAccess.getExpressionIntegerAccess().getValueDECIMALTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"net.sf.orcc.cal.Cal.DECIMAL");
	    }

    |		lv_value_0_2=RULE_OCTAL
		{
			newLeafNode(lv_value_0_2, grammarAccess.getExpressionIntegerAccess().getValueOCTALTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"net.sf.orcc.cal.Cal.OCTAL");
	    }

    |		lv_value_0_3=RULE_HEX
		{
			newLeafNode(lv_value_0_3, grammarAccess.getExpressionIntegerAccess().getValueHEXTerminalRuleCall_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_3, 
        		"net.sf.orcc.cal.Cal.HEX");
	    }

)

)
)
;





// Entry rule entryRuleExpressionString
entryRuleExpressionString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStringRule()); }
	 iv_ruleExpressionString=ruleExpressionString 
	 { $current=$iv_ruleExpressionString.current; } 
	 EOF 
;

// Rule ExpressionString
ruleExpressionString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getExpressionStringAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)
;





// Entry rule entryRuleAstType
entryRuleAstType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeRule()); }
	 iv_ruleAstType=ruleAstType 
	 { $current=$iv_ruleAstType.current; } 
	 EOF 
;

// Rule AstType
ruleAstType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeBoolParserRuleCall_0()); 
    }
    this_AstTypeBool_0=ruleAstTypeBool
    { 
        $current = $this_AstTypeBool_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeFloatParserRuleCall_1()); 
    }
    this_AstTypeFloat_1=ruleAstTypeFloat
    { 
        $current = $this_AstTypeFloat_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeHalfParserRuleCall_2()); 
    }
    this_AstTypeHalf_2=ruleAstTypeHalf
    { 
        $current = $this_AstTypeHalf_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeDoubleParserRuleCall_3()); 
    }
    this_AstTypeDouble_3=ruleAstTypeDouble
    { 
        $current = $this_AstTypeDouble_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeIntParserRuleCall_4()); 
    }
    this_AstTypeInt_4=ruleAstTypeInt
    { 
        $current = $this_AstTypeInt_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeListParserRuleCall_5()); 
    }
    this_AstTypeList_5=ruleAstTypeList
    { 
        $current = $this_AstTypeList_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeStringParserRuleCall_6()); 
    }
    this_AstTypeString_6=ruleAstTypeString
    { 
        $current = $this_AstTypeString_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAstTypeAccess().getAstTypeUintParserRuleCall_7()); 
    }
    this_AstTypeUint_7=ruleAstTypeUint
    { 
        $current = $this_AstTypeUint_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAstTypeBool
entryRuleAstTypeBool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeBoolRule()); }
	 iv_ruleAstTypeBool=ruleAstTypeBool 
	 { $current=$iv_ruleAstTypeBool.current; } 
	 EOF 
;

// Rule AstTypeBool
ruleAstTypeBool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeBoolAccess().getAstTypeBoolAction_0(),
            $current);
    }
)	otherlv_1='bool' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeBoolAccess().getBoolKeyword_1());
    }
)
;





// Entry rule entryRuleAstTypeFloat
entryRuleAstTypeFloat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeFloatRule()); }
	 iv_ruleAstTypeFloat=ruleAstTypeFloat 
	 { $current=$iv_ruleAstTypeFloat.current; } 
	 EOF 
;

// Rule AstTypeFloat
ruleAstTypeFloat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeFloatAccess().getAstTypeFloatAction_0(),
            $current);
    }
)	otherlv_1='float' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeFloatAccess().getFloatKeyword_1());
    }
)
;





// Entry rule entryRuleAstTypeHalf
entryRuleAstTypeHalf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeHalfRule()); }
	 iv_ruleAstTypeHalf=ruleAstTypeHalf 
	 { $current=$iv_ruleAstTypeHalf.current; } 
	 EOF 
;

// Rule AstTypeHalf
ruleAstTypeHalf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeHalfAccess().getAstTypeHalfAction_0(),
            $current);
    }
)	otherlv_1='half' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeHalfAccess().getHalfKeyword_1());
    }
)
;





// Entry rule entryRuleAstTypeDouble
entryRuleAstTypeDouble returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeDoubleRule()); }
	 iv_ruleAstTypeDouble=ruleAstTypeDouble 
	 { $current=$iv_ruleAstTypeDouble.current; } 
	 EOF 
;

// Rule AstTypeDouble
ruleAstTypeDouble returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeDoubleAccess().getAstTypeDoubleAction_0(),
            $current);
    }
)	otherlv_1='double' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeDoubleAccess().getDoubleKeyword_1());
    }
)
;





// Entry rule entryRuleAstTypeInt
entryRuleAstTypeInt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeIntRule()); }
	 iv_ruleAstTypeInt=ruleAstTypeInt 
	 { $current=$iv_ruleAstTypeInt.current; } 
	 EOF 
;

// Rule AstTypeInt
ruleAstTypeInt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeIntAccess().getAstTypeIntAction_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeIntAccess().getIntKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAstTypeIntAccess().getLeftParenthesisKeyword_2_0());
    }
	otherlv_3='size' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstTypeIntAccess().getSizeKeyword_2_1());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAstTypeIntAccess().getEqualsSignKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTypeIntAccess().getSizeAstExpressionParserRuleCall_2_3_0()); 
	    }
		lv_size_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTypeIntRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstTypeIntAccess().getRightParenthesisKeyword_2_4());
    }
)?)
;





// Entry rule entryRuleAstTypeList
entryRuleAstTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeListRule()); }
	 iv_ruleAstTypeList=ruleAstTypeList 
	 { $current=$iv_ruleAstTypeList.current; } 
	 EOF 
;

// Rule AstTypeList
ruleAstTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='List' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAstTypeListAccess().getListKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeListAccess().getLeftParenthesisKeyword_1());
    }
	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAstTypeListAccess().getTypeKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstTypeListAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTypeListAccess().getTypeAstTypeParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleAstType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTypeListRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"net.sf.orcc.cal.Cal.AstType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstTypeListAccess().getCommaKeyword_5());
    }
	otherlv_6='size' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstTypeListAccess().getSizeKeyword_6());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAstTypeListAccess().getEqualsSignKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTypeListAccess().getSizeAstExpressionParserRuleCall_8_0()); 
	    }
		lv_size_8_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTypeListRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_8_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAstTypeListAccess().getRightParenthesisKeyword_9());
    }
)
;





// Entry rule entryRuleAstTypeString
entryRuleAstTypeString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeStringRule()); }
	 iv_ruleAstTypeString=ruleAstTypeString 
	 { $current=$iv_ruleAstTypeString.current; } 
	 EOF 
;

// Rule AstTypeString
ruleAstTypeString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeStringAccess().getAstTypeStringAction_0(),
            $current);
    }
)	otherlv_1='String' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeStringAccess().getStringKeyword_1());
    }
)
;





// Entry rule entryRuleAstTypeUint
entryRuleAstTypeUint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstTypeUintRule()); }
	 iv_ruleAstTypeUint=ruleAstTypeUint 
	 { $current=$iv_ruleAstTypeUint.current; } 
	 EOF 
;

// Rule AstTypeUint
ruleAstTypeUint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstTypeUintAccess().getAstTypeUintAction_0(),
            $current);
    }
)	otherlv_1='uint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAstTypeUintAccess().getUintKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAstTypeUintAccess().getLeftParenthesisKeyword_2_0());
    }
	otherlv_3='size' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstTypeUintAccess().getSizeKeyword_2_1());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAstTypeUintAccess().getEqualsSignKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstTypeUintAccess().getSizeAstExpressionParserRuleCall_2_3_0()); 
	    }
		lv_size_5_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstTypeUintRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_5_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstTypeUintAccess().getRightParenthesisKeyword_2_4());
    }
)?)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getAnnotationsAstAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAstAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"net.sf.orcc.cal.Cal.AstAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeAstTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAstType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"net.sf.orcc.cal.Cal.AstType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getDimensionsAstExpressionParserRuleCall_3_1_0()); 
	    }
		lv_dimensions_4_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_4_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getRightSquareBracketKeyword_3_2());
    }
)*)
;





// Entry rule entryRuleValuedVariableDeclaration
entryRuleValuedVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedVariableDeclarationRule()); }
	 iv_ruleValuedVariableDeclaration=ruleValuedVariableDeclaration 
	 { $current=$iv_ruleValuedVariableDeclaration.current; } 
	 EOF 
;

// Rule ValuedVariableDeclaration
ruleValuedVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValuedVariableDeclarationAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
(
		lv_constant_1_0=	'=' 
    {
        newLeafNode(lv_constant_1_0, grammarAccess.getValuedVariableDeclarationAccess().getConstantEqualsSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "=");
	    }

)
)
    |	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValuedVariableDeclarationAccess().getColonEqualsSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedVariableDeclarationAccess().getValueAstExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleAstExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"net.sf.orcc.cal.Cal.AstExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAstAnnotation
entryRuleAstAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAstAnnotationRule()); }
	 iv_ruleAstAnnotation=ruleAstAnnotation 
	 { $current=$iv_ruleAstAnnotation.current; } 
	 EOF 
;

// Rule AstAnnotation
ruleAstAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAstAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAstAnnotationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAstAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstAnnotationAccess().getArgumentsAnnotationArgumentParserRuleCall_2_1_0()); 
	    }
		lv_arguments_3_0=ruleAnnotationArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstAnnotationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"net.sf.orcc.cal.Cal.AnnotationArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAstAnnotationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstAnnotationAccess().getArgumentsAnnotationArgumentParserRuleCall_2_2_1_0()); 
	    }
		lv_arguments_5_0=ruleAnnotationArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstAnnotationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"net.sf.orcc.cal.Cal.AnnotationArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstAnnotationAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleAnnotationArgument
entryRuleAnnotationArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationArgumentRule()); }
	 iv_ruleAnnotationArgument=ruleAnnotationArgument 
	 { $current=$iv_ruleAnnotationArgument.current; } 
	 EOF 
;

// Rule AnnotationArgument
ruleAnnotationArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAnnotationArgumentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationArgumentAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAnnotationArgumentAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





RULE_REAL : (('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_DECIMAL : '1'..'9' ('0'..'9')*;

RULE_OCTAL : '0' ('0'..'7')*;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


